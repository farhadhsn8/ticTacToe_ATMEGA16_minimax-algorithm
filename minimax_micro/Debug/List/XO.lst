
AVRASM ver. 2.1.30  C:\Users\Farhad\Desktop\riz002\Debug\List\XO.asm Wed Jul 15 15:22:45 2020

C:\Users\Farhad\Desktop\riz002\Debug\List\XO.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Farhad\Desktop\riz002\Debug\List\XO.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Farhad\Desktop\riz002\Debug\List\XO.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\Farhad\Desktop\riz002\Debug\List\XO.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Farhad\Desktop\riz002\Debug\List\XO.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\Farhad\Desktop\riz002\Debug\List\XO.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\Farhad\Desktop\riz002\Debug\List\XO.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\Farhad\Desktop\riz002\Debug\List\XO.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\Farhad\Desktop\riz002\Debug\List\XO.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\Farhad\Desktop\riz002\Debug\List\XO.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _br=R4
                 	.DEF _br_msb=R5
                 	.DEF _bc=R6
                 	.DEF _bc_msb=R7
                 	.DEF _mode=R8
                 	.DEF _mode_msb=R9
                 	.DEF _playerr=R10
                 	.DEF _playerr_msb=R11
                 	.DEF _count=R12
                 	.DEF _count_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 017a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _font5x7:
00002a 0705
00002b 6020
00002c 0000
00002d 0000      	.DB  0x5,0x7,0x20,0x60,0x0,0x0,0x0,0x0
00002e 0000
00002f 5f00
000030 0000
000031 0700      	.DB  0x0,0x0,0x0,0x5F,0x0,0x0,0x0,0x7
000032 0700
000033 1400
000034 147f
000035 147f      	.DB  0x0,0x7,0x0,0x14,0x7F,0x14,0x7F,0x14
000036 2a24
000037 2a7f
000038 2312
000039 0813      	.DB  0x24,0x2A,0x7F,0x2A,0x12,0x23,0x13,0x8
00003a 6264
00003b 4936
00003c 2255
00003d 0050      	.DB  0x64,0x62,0x36,0x49,0x55,0x22,0x50,0x0
00003e 0305
00003f 0000
000040 1c00
000041 4122      	.DB  0x5,0x3,0x0,0x0,0x0,0x1C,0x22,0x41
000042 0000
000043 2241
000044 001c
000045 2a08      	.DB  0x0,0x0,0x41,0x22,0x1C,0x0,0x8,0x2A
000046 2a1c
000047 0808
000048 3e08
000049 0808      	.DB  0x1C,0x2A,0x8,0x8,0x8,0x3E,0x8,0x8
00004a 5000
00004b 0030
00004c 0800
00004d 0808      	.DB  0x0,0x50,0x30,0x0,0x0,0x8,0x8,0x8
00004e 0808
00004f 3000
000050 0030
000051 2000      	.DB  0x8,0x8,0x0,0x30,0x30,0x0,0x0,0x20
000052 0810
000053 0204
000054 513e
000055 4549      	.DB  0x10,0x8,0x4,0x2,0x3E,0x51,0x49,0x45
000056 003e
000057 7f42
000058 0040
000059 6142      	.DB  0x3E,0x0,0x42,0x7F,0x40,0x0,0x42,0x61
00005a 4951
00005b 2146
00005c 4541
00005d 314b      	.DB  0x51,0x49,0x46,0x21,0x41,0x45,0x4B,0x31
00005e 1418
00005f 7f12
000060 2710
000061 4545      	.DB  0x18,0x14,0x12,0x7F,0x10,0x27,0x45,0x45
000062 3945
000063 4a3c
000064 4949
000065 0130      	.DB  0x45,0x39,0x3C,0x4A,0x49,0x49,0x30,0x1
000066 0971
000067 0305
000068 4936
000069 4949      	.DB  0x71,0x9,0x5,0x3,0x36,0x49,0x49,0x49
00006a 0636
00006b 4949
00006c 1e29
00006d 3600      	.DB  0x36,0x6,0x49,0x49,0x29,0x1E,0x0,0x36
00006e 0036
00006f 0000
000070 3656
000071 0000      	.DB  0x36,0x0,0x0,0x0,0x56,0x36,0x0,0x0
000072 0800
000073 2214
000074 1441
000075 1414      	.DB  0x0,0x8,0x14,0x22,0x41,0x14,0x14,0x14
000076 1414
000077 2241
000078 0814
000079 0200      	.DB  0x14,0x14,0x41,0x22,0x14,0x8,0x0,0x2
00007a 5101
00007b 0609
00007c 4932
00007d 4179      	.DB  0x1,0x51,0x9,0x6,0x32,0x49,0x79,0x41
00007e 7e3e
00007f 1111
000080 7e11
000081 497f      	.DB  0x3E,0x7E,0x11,0x11,0x11,0x7E,0x7F,0x49
000082 4949
000083 3e36
000084 4141
000085 2241      	.DB  0x49,0x49,0x36,0x3E,0x41,0x41,0x41,0x22
000086 417f
000087 2241
000088 7f1c
000089 4949      	.DB  0x7F,0x41,0x41,0x22,0x1C,0x7F,0x49,0x49
00008a 4149
00008b 097f
00008c 0109
00008d 3e01      	.DB  0x49,0x41,0x7F,0x9,0x9,0x1,0x1,0x3E
00008e 4141
00008f 3251
000090 087f
000091 0808      	.DB  0x41,0x41,0x51,0x32,0x7F,0x8,0x8,0x8
000092 007f
000093 7f41
000094 0041
000095 4020      	.DB  0x7F,0x0,0x41,0x7F,0x41,0x0,0x20,0x40
000096 3f41
000097 7f01
000098 1408
000099 4122      	.DB  0x41,0x3F,0x1,0x7F,0x8,0x14,0x22,0x41
00009a 407f
00009b 4040
00009c 7f40
00009d 0402      	.DB  0x7F,0x40,0x40,0x40,0x40,0x7F,0x2,0x4
00009e 7f02
00009f 047f
0000a0 1008
0000a1 3e7f      	.DB  0x2,0x7F,0x7F,0x4,0x8,0x10,0x7F,0x3E
0000a2 4141
0000a3 3e41
0000a4 097f
0000a5 0909      	.DB  0x41,0x41,0x41,0x3E,0x7F,0x9,0x9,0x9
0000a6 3e06
0000a7 5141
0000a8 5e21
0000a9 097f      	.DB  0x6,0x3E,0x41,0x51,0x21,0x5E,0x7F,0x9
0000aa 2919
0000ab 4646
0000ac 4949
0000ad 3149      	.DB  0x19,0x29,0x46,0x46,0x49,0x49,0x49,0x31
0000ae 0101
0000af 017f
0000b0 3f01
0000b1 4040      	.DB  0x1,0x1,0x7F,0x1,0x1,0x3F,0x40,0x40
0000b2 3f40
0000b3 201f
0000b4 2040
0000b5 7f1f      	.DB  0x40,0x3F,0x1F,0x20,0x40,0x20,0x1F,0x7F
0000b6 1820
0000b7 7f20
0000b8 1463
0000b9 1408      	.DB  0x20,0x18,0x20,0x7F,0x63,0x14,0x8,0x14
0000ba 0363
0000bb 7804
0000bc 0304
0000bd 5161      	.DB  0x63,0x3,0x4,0x78,0x4,0x3,0x61,0x51
0000be 4549
0000bf 0043
0000c0 7f00
0000c1 4141      	.DB  0x49,0x45,0x43,0x0,0x0,0x7F,0x41,0x41
0000c2 0402
0000c3 1008
0000c4 4120
0000c5 7f41      	.DB  0x2,0x4,0x8,0x10,0x20,0x41,0x41,0x7F
0000c6 0000
0000c7 0204
0000c8 0201
0000c9 4004      	.DB  0x0,0x0,0x4,0x2,0x1,0x2,0x4,0x40
0000ca 4040
0000cb 4040
0000cc 0100
0000cd 0402      	.DB  0x40,0x40,0x40,0x40,0x0,0x1,0x2,0x4
0000ce 2000
0000cf 5454
0000d0 7854
0000d1 487f      	.DB  0x0,0x20,0x54,0x54,0x54,0x78,0x7F,0x48
0000d2 4444
0000d3 3838
0000d4 4444
0000d5 2044      	.DB  0x44,0x44,0x38,0x38,0x44,0x44,0x44,0x20
0000d6 4438
0000d7 4844
0000d8 387f
0000d9 5454      	.DB  0x38,0x44,0x44,0x48,0x7F,0x38,0x54,0x54
0000da 1854
0000db 7e08
0000dc 0109
0000dd 0802      	.DB  0x54,0x18,0x8,0x7E,0x9,0x1,0x2,0x8
0000de 5414
0000df 3c54
0000e0 087f
0000e1 0404      	.DB  0x14,0x54,0x54,0x3C,0x7F,0x8,0x4,0x4
0000e2 0078
0000e3 7d44
0000e4 0040
0000e5 4020      	.DB  0x78,0x0,0x44,0x7D,0x40,0x0,0x20,0x40
0000e6 3d44
0000e7 0000
0000e8 107f
0000e9 4428      	.DB  0x44,0x3D,0x0,0x0,0x7F,0x10,0x28,0x44
0000ea 4100
0000eb 407f
0000ec 7c00
0000ed 1804      	.DB  0x0,0x41,0x7F,0x40,0x0,0x7C,0x4,0x18
0000ee 7804
0000ef 087c
0000f0 0404
0000f1 3878      	.DB  0x4,0x78,0x7C,0x8,0x4,0x4,0x78,0x38
0000f2 4444
0000f3 3844
0000f4 147c
0000f5 1414      	.DB  0x44,0x44,0x44,0x38,0x7C,0x14,0x14,0x14
0000f6 0808
0000f7 1414
0000f8 7c18
0000f9 087c      	.DB  0x8,0x8,0x14,0x14,0x18,0x7C,0x7C,0x8
0000fa 0404
0000fb 4808
0000fc 5454
0000fd 2054      	.DB  0x4,0x4,0x8,0x48,0x54,0x54,0x54,0x20
0000fe 3f04
0000ff 4044
000100 3c20
000101 4040      	.DB  0x4,0x3F,0x44,0x40,0x20,0x3C,0x40,0x40
000102 7c20
000103 201c
000104 2040
000105 3c1c      	.DB  0x20,0x7C,0x1C,0x20,0x40,0x20,0x1C,0x3C
000106 3040
000107 3c40
000108 2844
000109 2810      	.DB  0x40,0x30,0x40,0x3C,0x44,0x28,0x10,0x28
00010a 0c44
00010b 5050
00010c 3c50
00010d 6444      	.DB  0x44,0xC,0x50,0x50,0x50,0x3C,0x44,0x64
00010e 4c54
00010f 0044
000110 3608
000111 0041      	.DB  0x54,0x4C,0x44,0x0,0x8,0x36,0x41,0x0
000112 0000
000113 007f
000114 0000
000115 3641      	.DB  0x0,0x0,0x7F,0x0,0x0,0x0,0x41,0x36
000116 0008
000117 0102
000118 0402
000119 7f02      	.DB  0x8,0x0,0x2,0x1,0x2,0x4,0x2,0x7F
00011a 4141
00011b 7f41      	.DB  0x41,0x41,0x41,0x7F
                 __glcd_mask:
00011c 0100
00011d 0703
00011e 1f0f
00011f 7f3f      	.DB  0x0,0x1,0x3,0x7,0xF,0x1F,0x3F,0x7F
C:\Users\Farhad\Desktop\riz002\Debug\List\XO.asm(1192): warning: .cseg .db misalignment - padding zero byte
000120 00ff      	.DB  0xFF
                 _tbl10_G103:
000121 2710
000122 03e8
000123 0064
000124 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000125 0001      	.DB  0x1,0x0
                 _tbl16_G103:
000126 1000
000127 0100
000128 0010
000129 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00012a ffff
00012b ffff      	.DB  0xFF,0xFF,0xFF,0xFF
                 
                 _0x3:
00012c fdfe
00012d f7fb      	.DB  0xFE,0xFD,0xFB,0xF7
                 _0x0:
00012e 2000
00012f 2020
000130 3120
000131 7020      	.DB  0x0,0x20,0x20,0x20,0x20,0x31,0x20,0x70
000132 616c
000133 6579
000134 2072
000135 3d3d      	.DB  0x6C,0x61,0x79,0x65,0x72,0x20,0x3D,0x3D
000136 203e
000137 2031
000138 2020
000139 2020      	.DB  0x3E,0x20,0x31,0x20,0x20,0x20,0x20,0x20
00013a 2020
00013b 2032
00013c 6c70
00013d 7961      	.DB  0x20,0x20,0x32,0x20,0x70,0x6C,0x61,0x79
00013e 7265
00013f 2073
000140 3d3d
000141 203e      	.DB  0x65,0x72,0x73,0x20,0x3D,0x3D,0x3E,0x20
000142 2032
000143 2020
000144 0020
000145 7270      	.DB  0x32,0x20,0x20,0x20,0x20,0x0,0x70,0x72
000146 7365
000147 2073
000148 2043
000149 6f74      	.DB  0x65,0x73,0x73,0x20,0x43,0x20,0x74,0x6F
00014a 7320
00014b 6174
00014c 7472
00014d 2e2e      	.DB  0x20,0x73,0x74,0x61,0x72,0x74,0x2E,0x2E
00014e 202e
00014f 7020
000150 6572
000151 7373      	.DB  0x2E,0x20,0x20,0x70,0x72,0x65,0x73,0x73
000152 3020
000153 7420
000154 206f
000155 6572      	.DB  0x20,0x30,0x20,0x74,0x6F,0x20,0x72,0x65
000156 6573
000157 2e74
000158 2e2e
000159 2500      	.DB  0x73,0x65,0x74,0x2E,0x2E,0x2E,0x0,0x25
00015a 0064
00015b 0058
00015c 004f
00015d 002d      	.DB  0x64,0x0,0x58,0x0,0x4F,0x0,0x2D,0x0
00015e 2058
00015f 6977
000160 006e
000161 204f      	.DB  0x58,0x20,0x77,0x69,0x6E,0x0,0x4F,0x20
000162 6977
000163 006e
000164 7244
000165 7761      	.DB  0x77,0x69,0x6E,0x0,0x44,0x72,0x61,0x77
C:\Users\Farhad\Desktop\riz002\Debug\List\XO.asm(1220): warning: .cseg .db misalignment - padding zero byte
000166 0000      	.DB  0x0
                 _0x2100060:
C:\Users\Farhad\Desktop\riz002\Debug\List\XO.asm(1222): warning: .cseg .db misalignment - padding zero byte
000167 0001      	.DB  0x1
                 _0x2100000:
000168 4e2d
000169 4e41
00016a 4900
00016b 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Farhad\Desktop\riz002\Debug\List\XO.asm(1225): warning: .cseg .db misalignment - padding zero byte
00016c 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00016d 0004      	.DW  0x04
00016e 0004      	.DW  0x04
00016f 0254      	.DW  __REG_VARS*2
                 
000170 0004      	.DW  0x04
000171 01a8      	.DW  _row
000172 0258      	.DW  _0x3*2
                 
000173 0001      	.DW  0x01
000174 0160      	.DW  _0x5D
000175 025c      	.DW  _0x0*2
                 
000176 0001      	.DW  0x01
000177 01b1      	.DW  __seed_G108
000178 02ce      	.DW  _0x2100060*2
                 
                 _0xFFFFFFFF:
000179 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00017a 94f8      	CLI
00017b 27ee      	CLR  R30
00017c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00017d e0f1      	LDI  R31,1
00017e bffb      	OUT  GICR,R31
00017f bfeb      	OUT  GICR,R30
000180 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000181 e08d      	LDI  R24,(14-2)+1
000182 e0a2      	LDI  R26,2
000183 27bb      	CLR  R27
                 __CLEAR_REG:
000184 93ed      	ST   X+,R30
000185 958a      	DEC  R24
000186 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000187 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000188 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000189 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00018a 93ed      	ST   X+,R30
00018b 9701      	SBIW R24,1
00018c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00018d edea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00018e e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00018f 9185      	LPM  R24,Z+
000190 9195      	LPM  R25,Z+
000191 9700      	SBIW R24,0
000192 f061      	BREQ __GLOBAL_INI_END
000193 91a5      	LPM  R26,Z+
000194 91b5      	LPM  R27,Z+
000195 9005      	LPM  R0,Z+
000196 9015      	LPM  R1,Z+
000197 01bf      	MOVW R22,R30
000198 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000199 9005      	LPM  R0,Z+
00019a 920d      	ST   X+,R0
00019b 9701      	SBIW R24,1
00019c f7e1      	BRNE __GLOBAL_INI_LOOP
00019d 01fb      	MOVW R30,R22
00019e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00019f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0001a0 bfed      	OUT  SPL,R30
0001a1 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0001a2 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001a3 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0001a4 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0001a5 940c 05fb 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <glcd.h>
                 ;#include <font5x7.h>
                 ;#include <io.h>
                 ;#include <delay.h>
                 ;#include  <stdio.h>
                 ;#include <string.h>
                 ;
                 ;//---------------------global variables:
                 ;
                 ;int game[3][3];
                 ;int br = -1 ;   //best row
                 ;int bc = -1 ;   //best column
                 ;int win[8];
                 ;int mode; //iplayer or 2player
                 ;int playerr , count , state ,r,c,k ;
                 ;unsigned char row[4]={0xFE,0xFD,0xFB,0xF7};
                 
                 	.DSEG
                 ;char txt[2];
                 ;
                 ;//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ...
                 ;
                 ;
                 ;int maxx(int s, int d)
                 ; 0000 0018 {
                 
                 	.CSEG
                 _maxx:
                 ; .FSTART _maxx
                 ; 0000 0019     if (s > d)
0001a7 940e 0cfa 	CALL SUBOPT_0x0
                 ;	s -> Y+2
                 ;	d -> Y+0
0001a9 17ea      	CP   R30,R26
0001aa 07fb      	CPC  R31,R27
0001ab f41c      	BRGE _0x4
                 ; 0000 001A         return s;
0001ac 81ea      	LDD  R30,Y+2
0001ad 81fb      	LDD  R31,Y+2+1
0001ae c0e2      	RJMP _0x212000C
                 ; 0000 001B     return d;
                 _0x4:
0001af 81e8      	LD   R30,Y
0001b0 81f9      	LDD  R31,Y+1
0001b1 c0df      	RJMP _0x212000C
                 ; 0000 001C }
                 ; .FEND
                 ;
                 ;int minn(int s, int d)
                 ; 0000 001F {
                 _minn:
                 ; .FSTART _minn
                 ; 0000 0020     if (s < d)
0001b2 940e 0cfa 	CALL SUBOPT_0x0
                 ;	s -> Y+2
                 ;	d -> Y+0
0001b4 17ae      	CP   R26,R30
0001b5 07bf      	CPC  R27,R31
0001b6 f41c      	BRGE _0x5
                 ; 0000 0021         return s;
0001b7 81ea      	LDD  R30,Y+2
0001b8 81fb      	LDD  R31,Y+2+1
0001b9 c0d7      	RJMP _0x212000C
                 ; 0000 0022     return d;
                 _0x5:
0001ba 81e8      	LD   R30,Y
0001bb 81f9      	LDD  R31,Y+1
0001bc c0d4      	RJMP _0x212000C
                 ; 0000 0023 }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;bool isMovesLeft()
                 ; 0000 0029 {
                 _isMovesLeft:
                 ; .FSTART _isMovesLeft
                 ; 0000 002A     int i = 0 , j =0 ;
                 ; 0000 002B     for ( i = 0; i<3; i++)
0001bd 940e 0d01 	CALL SUBOPT_0x1
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 _0x7:
                +
0001bf 3003     +CPI R16 , LOW ( 3 )
0001c0 e0e0     +LDI R30 , HIGH ( 3 )
0001c1 071e     +CPC R17 , R30
                 	__CPWRN 16,17,3
0001c2 f49c      	BRGE _0x8
                 ; 0000 002C         for ( j = 0; j<3; j++)
                +
0001c3 e020     +LDI R18 , LOW ( 0 )
0001c4 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0xA:
                +
0001c5 3023     +CPI R18 , LOW ( 3 )
0001c6 e0e0     +LDI R30 , HIGH ( 3 )
0001c7 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3
0001c8 f454      	BRGE _0xB
                 ; 0000 002D             if (game[i][j] == 0)
0001c9 940e 0d0a 	CALL SUBOPT_0x2
0001cb 940e 0d12 	CALL SUBOPT_0x3
0001cd f411      	BRNE _0xC
                 ; 0000 002E                 return true;
0001ce e0e1      	LDI  R30,LOW(1)
0001cf c0bf      	RJMP _0x212000B
                 ; 0000 002F     return false;
                 _0xC:
                +
0001d0 5f2f     +SUBI R18 , LOW ( - 1 )
0001d1 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0001d2 cff2      	RJMP _0xA
                 _0xB:
                +
0001d3 5f0f     +SUBI R16 , LOW ( - 1 )
0001d4 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001d5 cfe9      	RJMP _0x7
                 _0x8:
0001d6 e0e0      	LDI  R30,LOW(0)
0001d7 c0b7      	RJMP _0x212000B
                 ; 0000 0030 }
                 ; .FEND
                 ;
                 ;
                 ;int evaluate()
                 ; 0000 0034 {
                 _evaluate:
                 ; .FSTART _evaluate
                 ; 0000 0035 
                 ; 0000 0036     int ro = 0 , col =0 ;
                 ; 0000 0037     for ( ro = 0; ro<3; ro++)
0001d8 940e 0d01 	CALL SUBOPT_0x1
                 ;	ro -> R16,R17
                 ;	col -> R18,R19
                 _0xE:
                +
0001da 3003     +CPI R16 , LOW ( 3 )
0001db e0e0     +LDI R30 , HIGH ( 3 )
0001dc 071e     +CPC R17 , R30
                 	__CPWRN 16,17,3
0001dd f59c      	BRGE _0xF
                 ; 0000 0038     {
                 ; 0000 0039         if (game[ro][0] == game[ro][1] &&
                 ; 0000 003A             game[ro][1] == game[ro][2])
0001de 940e 0d0a 	CALL SUBOPT_0x2
0001e0 940e 0d1c 	CALL SUBOPT_0x4
                +
0001e2 58e0     +SUBI R30 , LOW ( - _game - ( 2 ) )
0001e3 4ffe     +SBCI R31 , HIGH ( - _game - ( 2 ) )
                 	__ADDW1MN _game,2
0001e4 01df      	MOVW R26,R30
0001e5 940e 0f31 	CALL __GETW1P
0001e7 17e6      	CP   R30,R22
0001e8 07f7      	CPC  R31,R23
0001e9 f489      	BRNE _0x11
                +
0001ea e0a6     +LDI R26 , 6
0001eb 9fa0     +MUL R26 , R16
0001ec 01f0     +MOVW R30 , R0
0001ed 9fa1     +MUL R26 , R17
0001ee 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,6
                +
0001ef 58e0     +SUBI R30 , LOW ( - _game - ( 2 ) )
0001f0 4ffe     +SBCI R31 , HIGH ( - _game - ( 2 ) )
                 	__ADDW1MN _game,2
0001f1 940e 0d1c 	CALL SUBOPT_0x4
                +
0001f3 57ee     +SUBI R30 , LOW ( - _game - ( 4 ) )
0001f4 4ffe     +SBCI R31 , HIGH ( - _game - ( 4 ) )
                 	__ADDW1MN _game,4
0001f5 01df      	MOVW R26,R30
0001f6 940e 0f31 	CALL __GETW1P
0001f8 17e6      	CP   R30,R22
0001f9 07f7      	CPC  R31,R23
0001fa f009      	BREQ _0x12
                 _0x11:
0001fb c012      	RJMP _0x10
                 _0x12:
                 ; 0000 003B         {
                 ; 0000 003C             if (game[ro][0] == 1)
0001fc 940e 0d0a 	CALL SUBOPT_0x2
0001fe 01df      	MOVW R26,R30
0001ff 940e 0d24 	CALL SUBOPT_0x5
000201 f419      	BRNE _0x13
                 ; 0000 003D                 return +10;
000202 e0ea      	LDI  R30,LOW(10)
000203 e0f0      	LDI  R31,HIGH(10)
000204 c08a      	RJMP _0x212000B
                 ; 0000 003E             else if (game[ro][0] == -1)
                 _0x13:
000205 940e 0d0a 	CALL SUBOPT_0x2
000207 01df      	MOVW R26,R30
000208 940e 0d2a 	CALL SUBOPT_0x6
00020a f419      	BRNE _0x15
                 ; 0000 003F                 return -10;
00020b efe6      	LDI  R30,LOW(65526)
00020c efff      	LDI  R31,HIGH(65526)
00020d c081      	RJMP _0x212000B
                 ; 0000 0040         }
                 _0x15:
                 ; 0000 0041     }
                 _0x10:
                +
00020e 5f0f     +SUBI R16 , LOW ( - 1 )
00020f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000210 cfc9      	RJMP _0xE
                 _0xF:
                 ; 0000 0042 
                 ; 0000 0043 
                 ; 0000 0044     for ( col = 0; col<3; col++)
                +
000211 e020     +LDI R18 , LOW ( 0 )
000212 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x17:
                +
000213 3023     +CPI R18 , LOW ( 3 )
000214 e0e0     +LDI R30 , HIGH ( 3 )
000215 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3
000216 f564      	BRGE _0x18
                 ; 0000 0045     {
                 ; 0000 0046         if (game[0][col] == game[1][col] &&
                 ; 0000 0047             game[1][col] == game[2][col])
000217 940e 0d30 	CALL SUBOPT_0x7
000219 900d      	LD   R0,X+
00021a 901c      	LD   R1,X
00021b 940e 0d38 	CALL SUBOPT_0x8
00021d 940e 0f31 	CALL __GETW1P
00021f 15e0      	CP   R30,R0
000220 05f1      	CPC  R31,R1
000221 f469      	BRNE _0x1A
000222 940e 0d38 	CALL SUBOPT_0x8
000224 900d      	LD   R0,X+
000225 901c      	LD   R1,X
                +
000226 e8aa     +LDI R26 , LOW ( _game + ( 12 ) )
000227 e0b1     +LDI R27 , HIGH ( _game + ( 12 ) )
                 	__POINTW2MN _game,12
000228 940e 0d40 	CALL SUBOPT_0x9
00022a 940e 0f31 	CALL __GETW1P
00022c 15e0      	CP   R30,R0
00022d 05f1      	CPC  R31,R1
00022e f009      	BREQ _0x1B
                 _0x1A:
00022f c010      	RJMP _0x19
                 _0x1B:
                 ; 0000 0048         {
                 ; 0000 0049             if (game[0][col] == 1)
000230 940e 0d30 	CALL SUBOPT_0x7
000232 940e 0d24 	CALL SUBOPT_0x5
000234 f419      	BRNE _0x1C
                 ; 0000 004A                 return +10;
000235 e0ea      	LDI  R30,LOW(10)
000236 e0f0      	LDI  R31,HIGH(10)
000237 c057      	RJMP _0x212000B
                 ; 0000 004B 
                 ; 0000 004C             else if (game[0][col] == -1)
                 _0x1C:
000238 940e 0d30 	CALL SUBOPT_0x7
00023a 940e 0d2a 	CALL SUBOPT_0x6
00023c f419      	BRNE _0x1E
                 ; 0000 004D                 return -10;
00023d efe6      	LDI  R30,LOW(65526)
00023e efff      	LDI  R31,HIGH(65526)
00023f c04f      	RJMP _0x212000B
                 ; 0000 004E         }
                 _0x1E:
                 ; 0000 004F     }
                 _0x19:
                +
000240 5f2f     +SUBI R18 , LOW ( - 1 )
000241 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000242 cfd0      	RJMP _0x17
                 _0x18:
                 ; 0000 0050 
                 ; 0000 0051 
                 ; 0000 0052     if (game[0][0] == game[1][1] && game[1][1] == game[2][2])
000243 940e 0d46 	CALL SUBOPT_0xA
000245 940e 0d4b 	CALL SUBOPT_0xB
000247 17ea      	CP   R30,R26
000248 07fb      	CPC  R31,R27
000249 f459      	BRNE _0x20
                +
00024a 91a0 0186+LDS R26 , _game + ( 8 )
00024c 91b0 0187+LDS R27 , _game + ( 8 ) + 1
                 	__GETW2MN _game,8
                +
00024e 91e0 018e+LDS R30 , _game + ( 16 )
000250 91f0 018f+LDS R31 , _game + ( 16 ) + 1
                 	__GETW1MN _game,16
000252 17ea      	CP   R30,R26
000253 07fb      	CPC  R31,R27
000254 f009      	BREQ _0x21
                 _0x20:
000255 c010      	RJMP _0x1F
                 _0x21:
                 ; 0000 0053     {
                 ; 0000 0054         if (game[0][0] == 1)
000256 940e 0d4b 	CALL SUBOPT_0xB
000258 9711      	SBIW R26,1
000259 f419      	BRNE _0x22
                 ; 0000 0055             return +10;
00025a e0ea      	LDI  R30,LOW(10)
00025b e0f0      	LDI  R31,HIGH(10)
00025c c032      	RJMP _0x212000B
                 ; 0000 0056         else if (game[0][0] == -1)
                 _0x22:
00025d 940e 0d4b 	CALL SUBOPT_0xB
00025f 3faf      	CPI  R26,LOW(0xFFFF)
000260 efef      	LDI  R30,HIGH(0xFFFF)
000261 07be      	CPC  R27,R30
000262 f419      	BRNE _0x24
                 ; 0000 0057             return -10;
000263 efe6      	LDI  R30,LOW(65526)
000264 efff      	LDI  R31,HIGH(65526)
000265 c029      	RJMP _0x212000B
                 ; 0000 0058     }
                 _0x24:
                 ; 0000 0059 
                 ; 0000 005A     if (game[0][2] == game[1][1] && game[1][1] == game[2][0])
                 _0x1F:
                +
000266 91a0 0182+LDS R26 , _game + ( 4 )
000268 91b0 0183+LDS R27 , _game + ( 4 ) + 1
                 	__GETW2MN _game,4
00026a 940e 0d46 	CALL SUBOPT_0xA
00026c 17ea      	CP   R30,R26
00026d 07fb      	CPC  R31,R27
00026e f459      	BRNE _0x26
                +
00026f 91a0 0186+LDS R26 , _game + ( 8 )
000271 91b0 0187+LDS R27 , _game + ( 8 ) + 1
                 	__GETW2MN _game,8
                +
000273 91e0 018a+LDS R30 , _game + ( 12 )
000275 91f0 018b+LDS R31 , _game + ( 12 ) + 1
                 	__GETW1MN _game,12
000277 17ea      	CP   R30,R26
000278 07fb      	CPC  R31,R27
000279 f009      	BREQ _0x27
                 _0x26:
00027a c012      	RJMP _0x25
                 _0x27:
                 ; 0000 005B     {
                 ; 0000 005C         if (game[0][2] == 1)
00027b 940e 0d50 	CALL SUBOPT_0xC
00027d 30e1      	CPI  R30,LOW(0x1)
00027e e0a0      	LDI  R26,HIGH(0x1)
00027f 07fa      	CPC  R31,R26
000280 f419      	BRNE _0x28
                 ; 0000 005D             return +10;
000281 e0ea      	LDI  R30,LOW(10)
000282 e0f0      	LDI  R31,HIGH(10)
000283 c00b      	RJMP _0x212000B
                 ; 0000 005E         else if (game[0][2] == -1)
                 _0x28:
000284 940e 0d50 	CALL SUBOPT_0xC
000286 3fef      	CPI  R30,LOW(0xFFFF)
000287 efaf      	LDI  R26,HIGH(0xFFFF)
000288 07fa      	CPC  R31,R26
000289 f419      	BRNE _0x2A
                 ; 0000 005F             return -10;
00028a efe6      	LDI  R30,LOW(65526)
00028b efff      	LDI  R31,HIGH(65526)
00028c c002      	RJMP _0x212000B
                 ; 0000 0060     }
                 _0x2A:
                 ; 0000 0061 
                 ; 0000 0062     return 0;
                 _0x25:
00028d e0e0      	LDI  R30,LOW(0)
00028e e0f0      	LDI  R31,HIGH(0)
                 _0x212000B:
00028f 940e 0f68 	CALL __LOADLOCR4
                 _0x212000C:
000291 9624      	ADIW R28,4
000292 9508      	RET
                 ; 0000 0063 }
                 ; .FEND
                 ;
                 ;
                 ;int minimax( int depth, bool isMax)
                 ; 0000 0067 {
                 _minimax:
                 ; .FSTART _minimax
                 ; 0000 0068     int i = 0 , j =0 ;
                 ; 0000 0069     int score = evaluate();
                 ; 0000 006A 
                 ; 0000 006B     // evaluated score
                 ; 0000 006C     if (score == 10)
000293 93aa      	ST   -Y,R26
000294 940e 0d55 	CALL SUBOPT_0xD
                 ;	depth -> Y+7
                 ;	isMax -> Y+6
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	score -> R20,R21
000296 df41      	RCALL _evaluate
000297 01af      	MOVW R20,R30
000298 e0ea      	LDI  R30,LOW(10)
000299 e0f0      	LDI  R31,HIGH(10)
00029a 17e4      	CP   R30,R20
00029b 07f5      	CPC  R31,R21
00029c f411      	BRNE _0x2B
                 ; 0000 006D         return score;
00029d 01fa      	MOVW R30,R20
00029e c075      	RJMP _0x212000A
                 ; 0000 006E 
                 ; 0000 006F 
                 ; 0000 0070     if (score == -10)
                 _0x2B:
00029f efe6      	LDI  R30,LOW(65526)
0002a0 efff      	LDI  R31,HIGH(65526)
0002a1 17e4      	CP   R30,R20
0002a2 07f5      	CPC  R31,R21
0002a3 f411      	BRNE _0x2C
                 ; 0000 0071         return score;
0002a4 01fa      	MOVW R30,R20
0002a5 c06e      	RJMP _0x212000A
                 ; 0000 0072 
                 ; 0000 0073 
                 ; 0000 0074     if (isMovesLeft() == false)
                 _0x2C:
0002a6 df16      	RCALL _isMovesLeft
0002a7 30e0      	CPI  R30,0
0002a8 f419      	BRNE _0x2D
                 ; 0000 0075         return 0;
0002a9 e0e0      	LDI  R30,LOW(0)
0002aa e0f0      	LDI  R31,HIGH(0)
0002ab c068      	RJMP _0x212000A
                 ; 0000 0076 
                 ; 0000 0077 
                 ; 0000 0078     if (isMax)
                 _0x2D:
0002ac 81ee      	LDD  R30,Y+6
0002ad 30e0      	CPI  R30,0
0002ae f199      	BREQ _0x2E
                 ; 0000 0079     {
                 ; 0000 007A         int best = -1000;
                 ; 0000 007B 
                 ; 0000 007C 
                 ; 0000 007D         for ( i = 0; i<3; i++)
0002af 9722      	SBIW R28,2
0002b0 e1e8      	LDI  R30,LOW(24)
0002b1 83e8      	ST   Y,R30
0002b2 efec      	LDI  R30,LOW(252)
0002b3 83e9      	STD  Y+1,R30
                 ;	depth -> Y+9
                 ;	isMax -> Y+8
                 ;	best -> Y+0
                +
0002b4 e000     +LDI R16 , LOW ( 0 )
0002b5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x30:
                +
0002b6 3003     +CPI R16 , LOW ( 3 )
0002b7 e0e0     +LDI R30 , HIGH ( 3 )
0002b8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,3
0002b9 f524      	BRGE _0x31
                 ; 0000 007E         {
                 ; 0000 007F             for (j = 0; j<3; j++)
                +
0002ba e020     +LDI R18 , LOW ( 0 )
0002bb e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x33:
                +
0002bc 3023     +CPI R18 , LOW ( 3 )
0002bd e0e0     +LDI R30 , HIGH ( 3 )
0002be 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3
0002bf f4dc      	BRGE _0x34
                 ; 0000 0080             {
                 ; 0000 0081                 // Check if cell is empty
                 ; 0000 0082                 if (game[i][j] == 0)
0002c0 940e 0d0a 	CALL SUBOPT_0x2
0002c2 940e 0d12 	CALL SUBOPT_0x3
0002c4 f499      	BRNE _0x35
                 ; 0000 0083                 {
                 ; 0000 0084                     // Make the move
                 ; 0000 0085                     game[i][j] = 1;
0002c5 940e 0d0a 	CALL SUBOPT_0x2
0002c7 01df      	MOVW R26,R30
0002c8 940e 0d40 	CALL SUBOPT_0x9
0002ca e0e1      	LDI  R30,LOW(1)
0002cb e0f0      	LDI  R31,HIGH(1)
0002cc 940e 0d5c 	CALL SUBOPT_0xE
                 ; 0000 0086 
                 ; 0000 0087 
                 ; 0000 0088                     best = maxx(best,minimax(depth + 1, !isMax));
0002ce ded8      	RCALL _maxx
0002cf 83e8      	ST   Y,R30
0002d0 83f9      	STD  Y+1,R31
                 ; 0000 0089 
                 ; 0000 008A                     // Undo the move
                 ; 0000 008B                     game[i][j] = 0;
0002d1 940e 0d0a 	CALL SUBOPT_0x2
0002d3 01df      	MOVW R26,R30
0002d4 940e 0d40 	CALL SUBOPT_0x9
0002d6 940e 0d6f 	CALL SUBOPT_0xF
                 ; 0000 008C                 }
                 ; 0000 008D             }
                 _0x35:
                +
0002d8 5f2f     +SUBI R18 , LOW ( - 1 )
0002d9 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002da cfe1      	RJMP _0x33
                 _0x34:
                 ; 0000 008E         }
                +
0002db 5f0f     +SUBI R16 , LOW ( - 1 )
0002dc 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002dd cfd8      	RJMP _0x30
                 _0x31:
                 ; 0000 008F         return best;
0002de 81e8      	LD   R30,Y
0002df 81f9      	LDD  R31,Y+1
0002e0 9622      	ADIW R28,2
0002e1 c032      	RJMP _0x212000A
                 ; 0000 0090     }
                 ; 0000 0091 
                 ; 0000 0092 
                 ; 0000 0093     else
                 _0x2E:
                 ; 0000 0094     {
                 ; 0000 0095         int best = 1000;
                 ; 0000 0096 
                 ; 0000 0097         // Traverse all cells
                 ; 0000 0098         for (i = 0; i<3; i++)
0002e2 9722      	SBIW R28,2
0002e3 eee8      	LDI  R30,LOW(232)
0002e4 83e8      	ST   Y,R30
0002e5 e0e3      	LDI  R30,LOW(3)
0002e6 83e9      	STD  Y+1,R30
                 ;	depth -> Y+9
                 ;	isMax -> Y+8
                 ;	best -> Y+0
                +
0002e7 e000     +LDI R16 , LOW ( 0 )
0002e8 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x38:
                +
0002e9 3003     +CPI R16 , LOW ( 3 )
0002ea e0e0     +LDI R30 , HIGH ( 3 )
0002eb 071e     +CPC R17 , R30
                 	__CPWRN 16,17,3
0002ec f524      	BRGE _0x39
                 ; 0000 0099         {
                 ; 0000 009A             for (j = 0; j<3; j++)
                +
0002ed e020     +LDI R18 , LOW ( 0 )
0002ee e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x3B:
                +
0002ef 3023     +CPI R18 , LOW ( 3 )
0002f0 e0e0     +LDI R30 , HIGH ( 3 )
0002f1 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3
0002f2 f4dc      	BRGE _0x3C
                 ; 0000 009B             {
                 ; 0000 009C                 // Check if cell is empty
                 ; 0000 009D                 if (game[i][j] == 0)
0002f3 940e 0d0a 	CALL SUBOPT_0x2
0002f5 940e 0d12 	CALL SUBOPT_0x3
0002f7 f499      	BRNE _0x3D
                 ; 0000 009E                 {
                 ; 0000 009F                     // Make the move
                 ; 0000 00A0                     game[i][j] = -1;
0002f8 940e 0d0a 	CALL SUBOPT_0x2
0002fa 01df      	MOVW R26,R30
0002fb 940e 0d40 	CALL SUBOPT_0x9
0002fd efef      	LDI  R30,LOW(65535)
0002fe efff      	LDI  R31,HIGH(65535)
0002ff 940e 0d5c 	CALL SUBOPT_0xE
                 ; 0000 00A1                     best = minn(best, minimax(depth + 1, !isMax));
000301 deb0      	RCALL _minn
000302 83e8      	ST   Y,R30
000303 83f9      	STD  Y+1,R31
                 ; 0000 00A2 
                 ; 0000 00A3                     // Undo the move
                 ; 0000 00A4                     game[i][j] = 0;
000304 940e 0d0a 	CALL SUBOPT_0x2
000306 01df      	MOVW R26,R30
000307 940e 0d40 	CALL SUBOPT_0x9
000309 940e 0d6f 	CALL SUBOPT_0xF
                 ; 0000 00A5                 }
                 ; 0000 00A6             }
                 _0x3D:
                +
00030b 5f2f     +SUBI R18 , LOW ( - 1 )
00030c 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00030d cfe1      	RJMP _0x3B
                 _0x3C:
                 ; 0000 00A7         }
                +
00030e 5f0f     +SUBI R16 , LOW ( - 1 )
00030f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000310 cfd8      	RJMP _0x38
                 _0x39:
                 ; 0000 00A8         return best;
000311 81e8      	LD   R30,Y
000312 81f9      	LDD  R31,Y+1
000313 9622      	ADIW R28,2
                 ; 0000 00A9     }
                 ; 0000 00AA }
                 _0x212000A:
000314 940e 0f66 	CALL __LOADLOCR6
000316 9629      	ADIW R28,9
000317 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void findBestMove()
                 ; 0000 00AE {
                 _findBestMove:
                 ; .FSTART _findBestMove
                 ; 0000 00AF     int i = 0 , j =0 ;
                 ; 0000 00B0     int moveVal;
                 ; 0000 00B1     int bestVal = 1000;
                 ; 0000 00B2 
                 ; 0000 00B3     //glcd_outtextxyf(70,50,"190 st");
                 ; 0000 00B4 
                 ; 0000 00B5 
                 ; 0000 00B6     br = -1;
000318 9722      	SBIW R28,2
000319 eee8      	LDI  R30,LOW(232)
00031a 83e8      	ST   Y,R30
00031b e0e3      	LDI  R30,LOW(3)
00031c 83e9      	STD  Y+1,R30
00031d 940e 0d55 	CALL SUBOPT_0xD
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	moveVal -> R20,R21
                 ;	bestVal -> Y+6
00031f efef      	LDI  R30,LOW(65535)
000320 efff      	LDI  R31,HIGH(65535)
000321 012f      	MOVW R4,R30
                 ; 0000 00B7     bc = -1;
000322 013f      	MOVW R6,R30
                 ; 0000 00B8     //glcd_outtextxyf(70,50,"194 st");
                 ; 0000 00B9 
                 ; 0000 00BA     for (i = 0; i<3; i++)
                +
000323 e000     +LDI R16 , LOW ( 0 )
000324 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x3F:
                +
000325 3003     +CPI R16 , LOW ( 3 )
000326 e0e0     +LDI R30 , HIGH ( 3 )
000327 071e     +CPC R17 , R30
                 	__CPWRN 16,17,3
000328 f56c      	BRGE _0x40
                 ; 0000 00BB     {
                 ; 0000 00BC         for (j = 0; j<3; j++)
                +
000329 e020     +LDI R18 , LOW ( 0 )
00032a e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x42:
                +
00032b 3023     +CPI R18 , LOW ( 3 )
00032c e0e0     +LDI R30 , HIGH ( 3 )
00032d 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3
00032e f524      	BRGE _0x43
                 ; 0000 00BD         {
                 ; 0000 00BE             // Check if cell is empty
                 ; 0000 00BF             if (game[i][j] == 0)
00032f 940e 0d0a 	CALL SUBOPT_0x2
000331 940e 0d12 	CALL SUBOPT_0x3
000333 f4e1      	BRNE _0x44
                 ; 0000 00C0             {
                 ; 0000 00C1                 // Make the move
                 ; 0000 00C2                 game[i][j] = -1;
000334 940e 0d0a 	CALL SUBOPT_0x2
000336 01df      	MOVW R26,R30
000337 940e 0d40 	CALL SUBOPT_0x9
000339 940e 0d74 	CALL SUBOPT_0x10
                 ; 0000 00C3 
                 ; 0000 00C4 
                 ; 0000 00C5                 //glcd_outtextxyf(70,50,"214 st");
                 ; 0000 00C6                 moveVal = minimax(0, true);
00033b 940e 0d79 	CALL SUBOPT_0x11
00033d e0a1      	LDI  R26,LOW(1)
00033e df54      	RCALL _minimax
00033f 01af      	MOVW R20,R30
                 ; 0000 00C7                 //glcd_outtextxyf(70,50,"216 st");
                 ; 0000 00C8                 // Undo the move
                 ; 0000 00C9                 game[i][j] = 0;
000340 940e 0d0a 	CALL SUBOPT_0x2
000342 01df      	MOVW R26,R30
000343 940e 0d40 	CALL SUBOPT_0x9
000345 940e 0d6f 	CALL SUBOPT_0xF
                 ; 0000 00CA 
                 ; 0000 00CB 
                 ; 0000 00CC                 if (moveVal < bestVal)
000347 81ee      	LDD  R30,Y+6
000348 81ff      	LDD  R31,Y+6+1
000349 174e      	CP   R20,R30
00034a 075f      	CPC  R21,R31
00034b f424      	BRGE _0x45
                 ; 0000 00CD                 {
                 ; 0000 00CE                     br = i;
00034c 0128      	MOVW R4,R16
                 ; 0000 00CF 					bc = j;
00034d 0139      	MOVW R6,R18
                 ; 0000 00D0 					bestVal = moveVal;
                +
00034e 834e     +STD Y + 6 , R20
00034f 835f     +STD Y + 6 + 1 , R21
                 	__PUTWSR 20,21,6
                 ; 0000 00D1 				}
                 ; 0000 00D2 			}
                 _0x45:
                 ; 0000 00D3 		}
                 _0x44:
                +
000350 5f2f     +SUBI R18 , LOW ( - 1 )
000351 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000352 cfd8      	RJMP _0x42
                 _0x43:
                 ; 0000 00D4 	}
                +
000353 5f0f     +SUBI R16 , LOW ( - 1 )
000354 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000355 cfcf      	RJMP _0x3F
                 _0x40:
                 ; 0000 00D5     //glcd_outtextxyf(70,50,"232 st");
                 ; 0000 00D6 }
000356 940e 0f66 	CALL __LOADLOCR6
000358 9628      	ADIW R28,8
000359 9508      	RET
                 ; .FEND
                 ;
                 ;// Driver code
                 ;/*int main()
                 ;{
                 ;	int board[3][3] =
                 ;	{
                 ;		{ -1 , 1 , -1 },
                 ;		{ 0 , -1,  1},
                 ;		{ 0 , 0 , 0}
                 ;	};
                 ;
                 ;	Move bestMove = findBestMove(board);
                 ;
                 ;	printf("The Optimal Move is :\n");
                 ;	printf("ROW: %d COL: %d\n\n", bestMove.row,
                 ;		bestMove.col);
                 ;	return 0;
                 ;} */
                 ;
                 ;
                 ;//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                 ;
                 ;void keypad()
                 ; 0000 00EE {
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 00EF     while(1)
                 _0x46:
                 ; 0000 00F0     {
                 ; 0000 00F1         for(r=0;r<4;r++)
00035a 940e 0d7e 	CALL SUBOPT_0x12
                 _0x4A:
00035c 940e 0d84 	CALL SUBOPT_0x13
00035e 9714      	SBIW R26,4
00035f f5b4      	BRGE _0x4B
                 ; 0000 00F2         {
                 ; 0000 00F3            c=4;
000360 e0e4      	LDI  R30,LOW(4)
000361 e0f0      	LDI  R31,HIGH(4)
000362 940e 0d89 	CALL SUBOPT_0x14
                 ; 0000 00F4            PORTC=row[r];
000364 940e 0d8e 	CALL SUBOPT_0x15
000366 55e8      	SUBI R30,LOW(-_row)
000367 4ffe      	SBCI R31,HIGH(-_row)
000368 81e0      	LD   R30,Z
000369 bbe5      	OUT  0x15,R30
                 ; 0000 00F5            DDRC=0x0F;
00036a e0ef      	LDI  R30,LOW(15)
00036b bbe4      	OUT  0x14,R30
                 ; 0000 00F6            if(PINC.4==0)
00036c 999c      	SBIC 0x13,4
00036d c002      	RJMP _0x4C
                 ; 0000 00F7             c=0;
00036e 940e 0d93 	CALL SUBOPT_0x16
                 ; 0000 00F8            if(PINC.5==0)
                 _0x4C:
000370 999d      	SBIC 0x13,5
000371 c004      	RJMP _0x4D
                 ; 0000 00F9             c=1;
000372 e0e1      	LDI  R30,LOW(1)
000373 e0f0      	LDI  R31,HIGH(1)
000374 940e 0d89 	CALL SUBOPT_0x14
                 ; 0000 00FA            if(PINC.6==0)
                 _0x4D:
000376 999e      	SBIC 0x13,6
000377 c004      	RJMP _0x4E
                 ; 0000 00FB             c=2;
000378 e0e2      	LDI  R30,LOW(2)
000379 e0f0      	LDI  R31,HIGH(2)
00037a 940e 0d89 	CALL SUBOPT_0x14
                 ; 0000 00FC            if(PINC.7==0)
                 _0x4E:
00037c 999f      	SBIC 0x13,7
00037d c004      	RJMP _0x4F
                 ; 0000 00FD             c=3;
00037e e0e3      	LDI  R30,LOW(3)
00037f e0f0      	LDI  R31,HIGH(3)
000380 940e 0d89 	CALL SUBOPT_0x14
                 ; 0000 00FE            if(!(c==4))  //test raha shodn klid
                 _0x4F:
000382 940e 0d99 	CALL SUBOPT_0x17
000384 9714      	SBIW R26,4
000385 f049      	BREQ _0x50
                 ; 0000 00FF            {
                 ; 0000 0100                while(PINC.4==0);
                 _0x51:
000386 9b9c      	SBIS 0x13,4
000387 cffe      	RJMP _0x51
                 ; 0000 0101                while(PINC.5==0);
                 _0x54:
000388 9b9d      	SBIS 0x13,5
000389 cffe      	RJMP _0x54
                 ; 0000 0102                while(PINC.6==0);
                 _0x57:
00038a 9b9e      	SBIS 0x13,6
00038b cffe      	RJMP _0x57
                 ; 0000 0103                while(PINC.7==0);
                 _0x5A:
00038c 9b9f      	SBIS 0x13,7
00038d cffe      	RJMP _0x5A
                 ; 0000 0104                return;
00038e 9508      	RET
                 ; 0000 0105            }
                 ; 0000 0106            delay_ms(5);
                 _0x50:
00038f e0a5      	LDI  R26,LOW(5)
000390 e0b0      	LDI  R27,0
000391 940e 0ec7 	CALL _delay_ms
                 ; 0000 0107         }
000393 940e 0d9e 	CALL SUBOPT_0x18
000395 cfc6      	RJMP _0x4A
                 _0x4B:
                 ; 0000 0108     }
000396 cfc3      	RJMP _0x46
                 ; 0000 0109 }
                 ; .FEND
                 ;
                 ;
                 ;void init()
                 ; 0000 010D {
                 _init:
                 ; .FSTART _init
                 ; 0000 010E     playerr=0;    //0 ==> turn of X  and  1 ==> turn of O
000397 24aa      	CLR  R10
000398 24bb      	CLR  R11
                 ; 0000 010F     count=0;     // counter for each turn
000399 24cc      	CLR  R12
00039a 24dd      	CLR  R13
                 ; 0000 0110     state=0;     // 0==>normal    -1==>X wins    1==>O wins    2==>draw
00039b e0e0      	LDI  R30,LOW(0)
00039c 93e0 01a0 	STS  _state,R30
00039e 93e0 01a1 	STS  _state+1,R30
                 ; 0000 0111     strcpy(txt,"");
0003a0 eaec      	LDI  R30,LOW(_txt)
0003a1 e0f1      	LDI  R31,HIGH(_txt)
0003a2 93fa      	ST   -Y,R31
0003a3 93ea      	ST   -Y,R30
                +
0003a4 e6a0     +LDI R26 , LOW ( _0x5D + ( 0 ) )
0003a5 e0b1     +LDI R27 , HIGH ( _0x5D + ( 0 ) )
                 	__POINTW2MN _0x5D,0
0003a6 940e 0c63 	CALL _strcpy
                 ; 0000 0112     for(r=0;r<3;r++)
0003a8 940e 0d7e 	CALL SUBOPT_0x12
                 _0x5F:
0003aa 940e 0d84 	CALL SUBOPT_0x13
0003ac 9713      	SBIW R26,3
0003ad f484      	BRGE _0x60
                 ; 0000 0113         for(c=0;c<3;c++)
0003ae 940e 0d93 	CALL SUBOPT_0x16
                 _0x62:
0003b0 940e 0d99 	CALL SUBOPT_0x17
0003b2 9713      	SBIW R26,3
0003b3 f43c      	BRGE _0x63
                 ; 0000 0114             game[r][c]=0;
0003b4 940e 0da6 	CALL SUBOPT_0x19
0003b6 940e 0d6f 	CALL SUBOPT_0xF
0003b8 940e 0db6 	CALL SUBOPT_0x1A
0003ba cff5      	RJMP _0x62
                 _0x63:
                 ; 0000 0116 for(r=0;r<8;r++)
0003bb 940e 0d9e 	CALL SUBOPT_0x18
0003bd cfec      	RJMP _0x5F
                 _0x60:
0003be 940e 0d7e 	CALL SUBOPT_0x12
                 _0x65:
0003c0 940e 0d84 	CALL SUBOPT_0x13
0003c2 9718      	SBIW R26,8
0003c3 f42c      	BRGE _0x66
                 ; 0000 0117         win[r]=0;
0003c4 940e 0dbe 	CALL SUBOPT_0x1B
0003c6 940e 0d9e 	CALL SUBOPT_0x18
0003c8 cff7      	RJMP _0x65
                 _0x66:
                 ; 0000 0118 glcd_clear();
0003c9 940e 0dc6 	CALL SUBOPT_0x1C
                 ; 0000 0119      glcd_outtextxyf(0,0,"    1 player ==> 1       2 players ==> 2    ");
                +
0003cb e5ad     +LDI R26 , LOW ( 2 * _0x0 + ( 1 ) )
0003cc e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 1 ) )
                 	__POINTW2FN _0x0,1
0003cd 940e 0a7b 	CALL _glcd_outtextxyf
                 ; 0000 011A      do{
                 _0x68:
                 ; 0000 011B         keypad();
0003cf 940e 0dcc 	CALL SUBOPT_0x1D
                 ; 0000 011C         k=r*4+c;          //num of keys
                 ; 0000 011D     }while(k != 8 && k != 9);
0003d1 940e 0dd9 	CALL SUBOPT_0x1E
0003d3 9718      	SBIW R26,8
0003d4 f021      	BREQ _0x6A
0003d5 940e 0dd9 	CALL SUBOPT_0x1E
0003d7 9719      	SBIW R26,9
0003d8 f409      	BRNE _0x6B
                 _0x6A:
0003d9 c001      	RJMP _0x69
                 _0x6B:
0003da cff4      	RJMP _0x68
                 _0x69:
                 ; 0000 011E     if(k==8)
0003db 940e 0dd9 	CALL SUBOPT_0x1E
0003dd 9718      	SBIW R26,8
0003de f419      	BRNE _0x6C
                 ; 0000 011F         mode=1;   //1 player
0003df e0e1      	LDI  R30,LOW(1)
0003e0 e0f0      	LDI  R31,HIGH(1)
0003e1 014f      	MOVW R8,R30
                 ; 0000 0120     if(k==9)
                 _0x6C:
0003e2 940e 0dd9 	CALL SUBOPT_0x1E
0003e4 9719      	SBIW R26,9
0003e5 f419      	BRNE _0x6D
                 ; 0000 0121         mode=2;   //2 player
0003e6 e0e2      	LDI  R30,LOW(2)
0003e7 e0f0      	LDI  R31,HIGH(2)
0003e8 014f      	MOVW R8,R30
                 ; 0000 0122 
                 ; 0000 0123     r=0;
                 _0x6D:
0003e9 940e 0d7e 	CALL SUBOPT_0x12
                 ; 0000 0124     c=0;
0003eb 940e 0d93 	CALL SUBOPT_0x16
                 ; 0000 0125     glcd_clear();
0003ed 940e 0dc6 	CALL SUBOPT_0x1C
                 ; 0000 0126     glcd_outtextxyf(0,0,"press C to start...  press 0 to reset...");
                +
0003ef e8aa     +LDI R26 , LOW ( 2 * _0x0 + ( 46 ) )
0003f0 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 46 ) )
                 	__POINTW2FN _0x0,46
0003f1 940e 0a7b 	CALL _glcd_outtextxyf
                 ; 0000 0127 
                 ; 0000 0128     do{
                 _0x6F:
                 ; 0000 0129         keypad();
0003f3 940e 0dcc 	CALL SUBOPT_0x1D
                 ; 0000 012A         k=r*4+c;          //num of keys
                 ; 0000 012B     }while(k != 12);
0003f5 940e 0dd9 	CALL SUBOPT_0x1E
0003f7 971c      	SBIW R26,12
0003f8 f7d1      	BRNE _0x6F
                 ; 0000 012C 
                 ; 0000 012D     glcd_clear();
0003f9 940e 0724 	CALL _glcd_clear
                 ; 0000 012E     for(r=3;r>0;r--)     //shomaresh maAkoos
0003fb e0e3      	LDI  R30,LOW(3)
0003fc e0f0      	LDI  R31,HIGH(3)
0003fd 93e0 01a2 	STS  _r,R30
0003ff 93f0 01a3 	STS  _r+1,R31
                 _0x72:
000401 940e 0d84 	CALL SUBOPT_0x13
000403 940e 0f5b 	CALL __CPW02
000405 f524      	BRGE _0x73
                 ; 0000 012F     {
                 ; 0000 0130         sprintf(txt,"%d",r);
000406 eaec      	LDI  R30,LOW(_txt)
000407 e0f1      	LDI  R31,HIGH(_txt)
000408 93fa      	ST   -Y,R31
000409 93ea      	ST   -Y,R30
                +
00040a ebe3     +LDI R30 , LOW ( 2 * _0x0 + ( 87 ) )
00040b e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 87 ) )
                 	__POINTW1FN _0x0,87
00040c 93fa      	ST   -Y,R31
00040d 93ea      	ST   -Y,R30
00040e 940e 0d8e 	CALL SUBOPT_0x15
000410 940e 0eee 	CALL __CWD1
000412 940e 0f39 	CALL __PUTPARD1
000414 e084      	LDI  R24,4
000415 940e 0c1f 	CALL _sprintf
000417 9628      	ADIW R28,8
                 ; 0000 0131         glcd_outtext(txt);
000418 eaac      	LDI  R26,LOW(_txt)
000419 e0b1      	LDI  R27,HIGH(_txt)
00041a 940e 0a92 	CALL _glcd_outtext
                 ; 0000 0132         delay_ms(100);
00041c e6a4      	LDI  R26,LOW(100)
00041d e0b0      	LDI  R27,0
00041e 940e 0ec7 	CALL _delay_ms
                 ; 0000 0133         glcd_clear();
000420 940e 0724 	CALL _glcd_clear
                 ; 0000 0134     }
000422 eaa2      	LDI  R26,LOW(_r)
000423 e0b1      	LDI  R27,HIGH(_r)
000424 91ed      	LD   R30,X+
000425 91fd      	LD   R31,X+
000426 9731      	SBIW R30,1
000427 93fe      	ST   -X,R31
000428 93ee      	ST   -X,R30
000429 cfd7      	RJMP _0x72
                 _0x73:
                 ; 0000 0135 }
00042a 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x5D:
000160           	.BYTE 0x1
                 ;
                 ;
                 ;void showBoard()
                 ; 0000 0139 {
                 
                 	.CSEG
                 _showBoard:
                 ; .FSTART _showBoard
                 ; 0000 013A     glcd_clear();
00042b 940e 0724 	CALL _glcd_clear
                 ; 0000 013B     for(r=0;r<22;r+=10)
00042d 940e 0d7e 	CALL SUBOPT_0x12
                 _0x75:
00042f 940e 0d84 	CALL SUBOPT_0x13
000431 9756      	SBIW R26,22
000432 f574      	BRGE _0x76
                 ; 0000 013C         for(c=0;c<22;c+=10)
000433 940e 0d93 	CALL SUBOPT_0x16
                 _0x78:
000435 940e 0d99 	CALL SUBOPT_0x17
000437 9756      	SBIW R26,22
000438 f504      	BRGE _0x79
                 ; 0000 013D         {
                 ; 0000 013E             if(game[r/10][c/10]==1)
000439 940e 0dde 	CALL SUBOPT_0x1F
00043b 940e 0d24 	CALL SUBOPT_0x5
00043d f429      	BRNE _0x7A
                 ; 0000 013F                 glcd_outtextxyf(c,r,"X");
00043e 940e 0df5 	CALL SUBOPT_0x20
                +
000440 eba6     +LDI R26 , LOW ( 2 * _0x0 + ( 90 ) )
000441 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 90 ) )
                 	__POINTW2FN _0x0,90
000442 c00e      	RJMP _0xBA
                 ; 0000 0140             else if(game[r/10][c/10]==-1)
                 _0x7A:
000443 940e 0dde 	CALL SUBOPT_0x1F
000445 940e 0d2a 	CALL SUBOPT_0x6
000447 f429      	BRNE _0x7C
                 ; 0000 0141                 glcd_outtextxyf(c,r,"O");
000448 940e 0df5 	CALL SUBOPT_0x20
                +
00044a eba8     +LDI R26 , LOW ( 2 * _0x0 + ( 92 ) )
00044b e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 92 ) )
                 	__POINTW2FN _0x0,92
00044c c004      	RJMP _0xBA
                 ; 0000 0142             else
                 _0x7C:
                 ; 0000 0143                 glcd_outtextxyf(c,r,"-");
00044d 940e 0df5 	CALL SUBOPT_0x20
                +
00044f ebaa     +LDI R26 , LOW ( 2 * _0x0 + ( 94 ) )
000450 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 94 ) )
                 	__POINTW2FN _0x0,94
                 _0xBA:
000451 940e 0a7b 	CALL _glcd_outtextxyf
                 ; 0000 0144         }
000453 940e 0dfc 	CALL SUBOPT_0x21
000455 963a      	ADIW R30,10
000456 940e 0d89 	CALL SUBOPT_0x14
000458 cfdc      	RJMP _0x78
                 _0x79:
000459 940e 0d8e 	CALL SUBOPT_0x15
00045b 963a      	ADIW R30,10
00045c 93e0 01a2 	STS  _r,R30
00045e 93f0 01a3 	STS  _r+1,R31
000460 cfce      	RJMP _0x75
                 _0x76:
                 ; 0000 0145 /*
                 ; 0000 0146 for(c=1;c<=100;c++)
                 ; 0000 0147 {
                 ; 0000 0148 glcd_clear();
                 ; 0000 0149 glcd_outtextxyf(c,1,"salam");
                 ; 0000 014A delay_ms(10);
                 ; 0000 014B }
                 ; 0000 014C      */
                 ; 0000 014D }
000461 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void winnerCheck()
                 ; 0000 0151 {
                 _winnerCheck:
                 ; .FSTART _winnerCheck
                 ; 0000 0152     for(r=0;r<8;r++)
000462 940e 0d7e 	CALL SUBOPT_0x12
                 _0x7F:
000464 940e 0d84 	CALL SUBOPT_0x13
000466 9718      	SBIW R26,8
000467 f42c      	BRGE _0x80
                 ; 0000 0153       win[r]=0;
000468 940e 0dbe 	CALL SUBOPT_0x1B
00046a 940e 0d9e 	CALL SUBOPT_0x18
00046c cff7      	RJMP _0x7F
                 _0x80:
                 ; 0000 0154 for(r=0;r<3;r++)
00046d 940e 0d7e 	CALL SUBOPT_0x12
                 _0x82:
00046f 940e 0d84 	CALL SUBOPT_0x13
000471 9713      	SBIW R26,3
000472 f00c      	BRLT PC+2
000473 c06b      	RJMP _0x83
                 ; 0000 0155        for(c=0;c<3;c++)
000474 940e 0d93 	CALL SUBOPT_0x16
                 _0x85:
000476 940e 0d99 	CALL SUBOPT_0x17
000478 9713      	SBIW R26,3
000479 f00c      	BRLT PC+2
00047a c061      	RJMP _0x86
                 ; 0000 0156        {
                 ; 0000 0157            win[r]+=game[r][c];
00047b 940e 0e01 	CALL SUBOPT_0x22
00047d 0fea      	ADD  R30,R26
00047e 1ffb      	ADC  R31,R27
00047f 93ff      	PUSH R31
000480 93ef      	PUSH R30
000481 8170      	LD   R23,Z
000482 8181      	LDD  R24,Z+1
000483 940e 0da6 	CALL SUBOPT_0x19
000485 940e 0f31 	CALL __GETW1P
000487 0fe7      	ADD  R30,R23
000488 1ff8      	ADC  R31,R24
000489 91af      	POP  R26
00048a 91bf      	POP  R27
00048b 93ed      	ST   X+,R30
00048c 93fc      	ST   X,R31
                 ; 0000 0158            win[r+3]+=game[c][r];
00048d 940e 0d8e 	CALL SUBOPT_0x15
00048f 9633      	ADIW R30,3
000490 e9a0      	LDI  R26,LOW(_win)
000491 e0b1      	LDI  R27,HIGH(_win)
000492 0fee      	LSL  R30
000493 1fff      	ROL  R31
000494 0fea      	ADD  R30,R26
000495 1ffb      	ADC  R31,R27
000496 93ff      	PUSH R31
000497 93ef      	PUSH R30
000498 8170      	LD   R23,Z
000499 8181      	LDD  R24,Z+1
00049a 940e 0d99 	CALL SUBOPT_0x17
00049c e0e6      	LDI  R30,LOW(6)
00049d 940e 0f05 	CALL __MULB1W2U
00049f 58e2      	SUBI R30,LOW(-_game)
0004a0 4ffe      	SBCI R31,HIGH(-_game)
0004a1 01df      	MOVW R26,R30
0004a2 940e 0d8e 	CALL SUBOPT_0x15
0004a4 0fee      	LSL  R30
0004a5 1fff      	ROL  R31
0004a6 940e 0e07 	CALL SUBOPT_0x23
0004a8 0fe7      	ADD  R30,R23
0004a9 1ff8      	ADC  R31,R24
0004aa 91af      	POP  R26
0004ab 91bf      	POP  R27
0004ac 93ed      	ST   X+,R30
0004ad 93fc      	ST   X,R31
                 ; 0000 0159            if(r==c)
0004ae 940e 0dfc 	CALL SUBOPT_0x21
0004b0 940e 0d84 	CALL SUBOPT_0x13
0004b2 17ea      	CP   R30,R26
0004b3 07fb      	CPC  R31,R27
0004b4 f471      	BRNE _0x87
                 ; 0000 015A               win[6]+=game[r][c];
0004b5 940e 0da6 	CALL SUBOPT_0x19
0004b7 940e 0f31 	CALL __GETW1P
                +
0004b9 91a0 019c+LDS R26 , _win + ( 12 )
0004bb 91b0 019d+LDS R27 , _win + ( 12 ) + 1
                 	__GETW2MN _win,12
0004bd 0fea      	ADD  R30,R26
0004be 1ffb      	ADC  R31,R27
                +
0004bf 93e0 019c+STS _win + ( 12 ) , R30
0004c1 93f0 019d+STS _win + ( 12 ) + 1 , R31
                 	__PUTW1MN _win,12
                 ; 0000 015B            if(r+c==2)
                 _0x87:
0004c3 940e 0dfc 	CALL SUBOPT_0x21
0004c5 940e 0d84 	CALL SUBOPT_0x13
0004c7 0fae      	ADD  R26,R30
0004c8 1fbf      	ADC  R27,R31
0004c9 9712      	SBIW R26,2
0004ca f471      	BRNE _0x88
                 ; 0000 015C               win[7]+=game[r][c];
0004cb 940e 0da6 	CALL SUBOPT_0x19
0004cd 940e 0f31 	CALL __GETW1P
                +
0004cf 91a0 019e+LDS R26 , _win + ( 14 )
0004d1 91b0 019f+LDS R27 , _win + ( 14 ) + 1
                 	__GETW2MN _win,14
0004d3 0fea      	ADD  R30,R26
0004d4 1ffb      	ADC  R31,R27
                +
0004d5 93e0 019e+STS _win + ( 14 ) , R30
0004d7 93f0 019f+STS _win + ( 14 ) + 1 , R31
                 	__PUTW1MN _win,14
                 ; 0000 015D        }
                 _0x88:
0004d9 940e 0db6 	CALL SUBOPT_0x1A
0004db cf9a      	RJMP _0x85
                 _0x86:
0004dc 940e 0d9e 	CALL SUBOPT_0x18
0004de cf90      	RJMP _0x82
                 _0x83:
                 ; 0000 015E }
0004df 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void play()
                 ; 0000 0163 {
                 _play:
                 ; .FSTART _play
                 ; 0000 0164    while(state==0)
                 _0x89:
0004e0 91e0 01a0 	LDS  R30,_state
0004e2 91f0 01a1 	LDS  R31,_state+1
0004e4 9730      	SBIW R30,0
0004e5 f009      	BREQ PC+2
0004e6 c0f5      	RJMP _0x8B
                 ; 0000 0165    {
                 ; 0000 0166       if(mode==2)
0004e7 e0e2      	LDI  R30,LOW(2)
0004e8 e0f0      	LDI  R31,HIGH(2)
0004e9 15e8      	CP   R30,R8
0004ea 05f9      	CPC  R31,R9
0004eb f501      	BRNE _0x8C
                 ; 0000 0167       {
                 ; 0000 0168           keypad();
0004ec de6d      	RCALL _keypad
                 ; 0000 0169           if(r!=3 && c!=3)        //satr o sotun akhar safhe klid nbashad
0004ed 940e 0d84 	CALL SUBOPT_0x13
0004ef 9713      	SBIW R26,3
0004f0 f021      	BREQ _0x8E
0004f1 940e 0d99 	CALL SUBOPT_0x17
0004f3 9713      	SBIW R26,3
0004f4 f409      	BRNE _0x8F
                 _0x8E:
0004f5 c016      	RJMP _0x8D
                 _0x8F:
                 ; 0000 016A           {
                 ; 0000 016B              if(game[r][c]==0)
0004f6 940e 0da6 	CALL SUBOPT_0x19
0004f8 940e 0f31 	CALL __GETW1P
0004fa 9730      	SBIW R30,0
0004fb f481      	BRNE _0x90
                 ; 0000 016C              {
                 ; 0000 016D                   if (playerr==0)
0004fc 2c0a      	MOV  R0,R10
0004fd 280b      	OR   R0,R11
0004fe f429      	BRNE _0x91
                 ; 0000 016E                       game[r][c]=1;
0004ff 940e 0da6 	CALL SUBOPT_0x19
000501 e0e1      	LDI  R30,LOW(1)
000502 e0f0      	LDI  R31,HIGH(1)
000503 c004      	RJMP _0xBB
                 ; 0000 016F                   else
                 _0x91:
                 ; 0000 0170                       game[r][c]=-1;
000504 940e 0da6 	CALL SUBOPT_0x19
000506 efef      	LDI  R30,LOW(65535)
000507 efff      	LDI  R31,HIGH(65535)
                 _0xBB:
000508 93ed      	ST   X+,R30
000509 93fc      	ST   X,R31
                 ; 0000 0171                   playerr=!playerr;   //nobat avaz mishavad
00050a 940e 0e0c 	CALL SUBOPT_0x24
                 ; 0000 0172                   count++;
                 ; 0000 0173              }
                 ; 0000 0174           }
                 _0x90:
                 ; 0000 0175       }
                 _0x8D:
                 ; 0000 0176 
                 ; 0000 0177       if (mode==1)
                 _0x8C:
00050c e0e1      	LDI  R30,LOW(1)
00050d e0f0      	LDI  R31,HIGH(1)
00050e 15e8      	CP   R30,R8
00050f 05f9      	CPC  R31,R9
000510 f009      	BREQ PC+2
000511 c084      	RJMP _0x93
                 ; 0000 0178       {
                 ; 0000 0179           if (playerr==0)     //turn of x
000512 2c0a      	MOV  R0,R10
000513 280b      	OR   R0,R11
000514 f4b1      	BRNE _0x94
                 ; 0000 017A           {
                 ; 0000 017B               keypad();
000515 de44      	RCALL _keypad
                 ; 0000 017C               if(r!=3 && c!=3)        //satr o sotun akhar safhe klid nbashad
000516 940e 0d84 	CALL SUBOPT_0x13
000518 9713      	SBIW R26,3
000519 f021      	BREQ _0x96
00051a 940e 0d99 	CALL SUBOPT_0x17
00051c 9713      	SBIW R26,3
00051d f409      	BRNE _0x97
                 _0x96:
00051e c00c      	RJMP _0x95
                 _0x97:
                 ; 0000 017D               {
                 ; 0000 017E                   if(game[r][c]==0)
00051f 940e 0da6 	CALL SUBOPT_0x19
000521 940e 0f31 	CALL __GETW1P
000523 9730      	SBIW R30,0
000524 f431      	BRNE _0x98
                 ; 0000 017F                   {
                 ; 0000 0180                      game[r][c]=1;
000525 940e 0da6 	CALL SUBOPT_0x19
000527 e0e1      	LDI  R30,LOW(1)
000528 e0f0      	LDI  R31,HIGH(1)
000529 93ed      	ST   X+,R30
00052a 93fc      	ST   X,R31
                 ; 0000 0181 
                 ; 0000 0182                   }
                 ; 0000 0183               }
                 _0x98:
                 ; 0000 0184 
                 ; 0000 0185           }
                 _0x95:
                 ; 0000 0186 
                 ; 0000 0187           if (playerr == 1 )    //turn of O
                 _0x94:
00052b e0e1      	LDI  R30,LOW(1)
00052c e0f0      	LDI  R31,HIGH(1)
00052d 15ea      	CP   R30,R10
00052e 05fb      	CPC  R31,R11
00052f f009      	BREQ PC+2
000530 c063      	RJMP _0x99
                 ; 0000 0188           {
                 ; 0000 0189                if(count==1) //hard code
000531 15ec      	CP   R30,R12
000532 05fd      	CPC  R31,R13
000533 f009      	BREQ PC+2
000534 c04a      	RJMP _0x9A
                 ; 0000 018A                {
                 ; 0000 018B                   if(game[1][1]==1)   game[2][0]=-1;     //vasat
000535 940e 0d46 	CALL SUBOPT_0xA
000537 30e1      	CPI  R30,LOW(0x1)
000538 e0a0      	LDI  R26,HIGH(0x1)
000539 07fa      	CPC  R31,R26
00053a f421      	BRNE _0x9B
                +
00053b e8ea     +LDI R30 , LOW ( _game + ( 12 ) )
00053c e0f1     +LDI R31 , HIGH ( _game + ( 12 ) )
                 	__POINTW1MN _game,12
00053d 940e 0e15 	CALL SUBOPT_0x25
                 ; 0000 018C                   if(game[0][0]==1 ||game[0][2]==1 ||game[2][0]==1 ||game[2][2]==1)   game[1][1]=-1; //gooshe ha
                 _0x9B:
00053f 940e 0d4b 	CALL SUBOPT_0xB
000541 9711      	SBIW R26,1
000542 f091      	BREQ _0x9D
000543 940e 0d50 	CALL SUBOPT_0xC
000545 9731      	SBIW R30,1
000546 f071      	BREQ _0x9D
                +
000547 91e0 018a+LDS R30 , _game + ( 12 )
000549 91f0 018b+LDS R31 , _game + ( 12 ) + 1
                 	__GETW1MN _game,12
00054b 9731      	SBIW R30,1
00054c f041      	BREQ _0x9D
                +
00054d 91e0 018e+LDS R30 , _game + ( 16 )
00054f 91f0 018f+LDS R31 , _game + ( 16 ) + 1
                 	__GETW1MN _game,16
000551 30e1      	CPI  R30,LOW(0x1)
000552 e0a0      	LDI  R26,HIGH(0x1)
000553 07fa      	CPC  R31,R26
000554 f421      	BRNE _0x9C
                 _0x9D:
                +
000555 e8e6     +LDI R30 , LOW ( _game + ( 8 ) )
000556 e0f1     +LDI R31 , HIGH ( _game + ( 8 ) )
                 	__POINTW1MN _game,8
000557 940e 0e15 	CALL SUBOPT_0x25
                 ; 0000 018D                   if(game[0][1]==1 ||game[1][0]==1)   game[0][0]=-1;      //other
                 _0x9C:
                +
000559 91e0 0180+LDS R30 , _game + ( 2 )
00055b 91f0 0181+LDS R31 , _game + ( 2 ) + 1
                 	__GETW1MN _game,2
00055d 9731      	SBIW R30,1
00055e f041      	BREQ _0xA0
                +
00055f 91e0 0184+LDS R30 , _game + ( 6 )
000561 91f0 0185+LDS R31 , _game + ( 6 ) + 1
                 	__GETW1MN _game,6
000563 30e1      	CPI  R30,LOW(0x1)
000564 e0a0      	LDI  R26,HIGH(0x1)
000565 07fa      	CPC  R31,R26
000566 f431      	BRNE _0x9F
                 _0xA0:
000567 efef      	LDI  R30,LOW(65535)
000568 efff      	LDI  R31,HIGH(65535)
000569 93e0 017e 	STS  _game,R30
00056b 93f0 017f 	STS  _game+1,R31
                 ; 0000 018E                   if(game[1][2]==1 ||game[2][1]==1)   game[2][2]=-1;      //other
                 _0x9F:
                +
00056d 91e0 0188+LDS R30 , _game + ( 10 )
00056f 91f0 0189+LDS R31 , _game + ( 10 ) + 1
                 	__GETW1MN _game,10
000571 9731      	SBIW R30,1
000572 f041      	BREQ _0xA3
                +
000573 91e0 018c+LDS R30 , _game + ( 14 )
000575 91f0 018d+LDS R31 , _game + ( 14 ) + 1
                 	__GETW1MN _game,14
000577 30e1      	CPI  R30,LOW(0x1)
000578 e0a0      	LDI  R26,HIGH(0x1)
000579 07fa      	CPC  R31,R26
00057a f421      	BRNE _0xA2
                 _0xA3:
                +
00057b e8ee     +LDI R30 , LOW ( _game + ( 16 ) )
00057c e0f1     +LDI R31 , HIGH ( _game + ( 16 ) )
                 	__POINTW1MN _game,16
00057d 940e 0e15 	CALL SUBOPT_0x25
                 ; 0000 018F 
                 ; 0000 0190                }
                 _0xA2:
                 ; 0000 0191                //glcd_outtextxyf(70,50,"417 ln");
                 ; 0000 0192 
                 ; 0000 0193 
                 ; 0000 0194                if(count != 1)
                 _0x9A:
00057f e0e1      	LDI  R30,LOW(1)
000580 e0f0      	LDI  R31,HIGH(1)
000581 15ec      	CP   R30,R12
000582 05fd      	CPC  R31,R13
000583 f081      	BREQ _0xA5
                 ; 0000 0195                {
                 ; 0000 0196                   findBestMove();
000584 dd93      	RCALL _findBestMove
                 ; 0000 0197                   //glcd_outtextxyf(70,50,"X win");
                 ; 0000 0198                   game[br][bc]= -1;
000585 01f2      	MOVW R30,R4
000586 e0a6      	LDI  R26,LOW(6)
000587 e0b0      	LDI  R27,HIGH(6)
000588 940e 0efd 	CALL __MULW12U
00058a 58e2      	SUBI R30,LOW(-_game)
00058b 4ffe      	SBCI R31,HIGH(-_game)
00058c 01df      	MOVW R26,R30
00058d 01f3      	MOVW R30,R6
00058e 0fee      	LSL  R30
00058f 1fff      	ROL  R31
000590 0fae      	ADD  R26,R30
000591 1fbf      	ADC  R27,R31
000592 940e 0d74 	CALL SUBOPT_0x10
                 ; 0000 0199                }
                 ; 0000 019A 
                 ; 0000 019B           }
                 _0xA5:
                 ; 0000 019C           playerr=!playerr;   //nobat avaz mishavad
                 _0x99:
000594 940e 0e0c 	CALL SUBOPT_0x24
                 ; 0000 019D           count++;
                 ; 0000 019E       }
                 ; 0000 019F 
                 ; 0000 01A0 
                 ; 0000 01A1 
                 ; 0000 01A2       k=r*4+c;
                 _0x93:
000596 940e 0d8e 	CALL SUBOPT_0x15
000598 940e 0ee9 	CALL __LSLW2
00059a 940e 0d99 	CALL SUBOPT_0x17
00059c 0fea      	ADD  R30,R26
00059d 1ffb      	ADC  R31,R27
00059e 93e0 01a6 	STS  _k,R30
0005a0 93f0 01a7 	STS  _k+1,R31
                 ; 0000 01A3       if(k==13)
0005a2 940e 0dd9 	CALL SUBOPT_0x1E
0005a4 971d      	SBIW R26,13
0005a5 f409      	BRNE _0xA6
                 ; 0000 01A4          init();
0005a6 ddf0      	RCALL _init
                 ; 0000 01A5       showBoard();
                 _0xA6:
0005a7 de83      	RCALL _showBoard
                 ; 0000 01A6       winnerCheck();
0005a8 deb9      	RCALL _winnerCheck
                 ; 0000 01A7       for(r=0;r<8;r++)
0005a9 940e 0d7e 	CALL SUBOPT_0x12
                 _0xA8:
0005ab 940e 0d84 	CALL SUBOPT_0x13
0005ad 9718      	SBIW R26,8
0005ae f4e4      	BRGE _0xA9
                 ; 0000 01A8          if(win[r]==3)
0005af 940e 0e01 	CALL SUBOPT_0x22
0005b1 940e 0e07 	CALL SUBOPT_0x23
0005b3 30e3      	CPI  R30,LOW(0x3)
0005b4 e0a0      	LDI  R26,HIGH(0x3)
0005b5 07fa      	CPC  R31,R26
0005b6 f419      	BRNE _0xAA
                 ; 0000 01A9             state=1;
0005b7 e0e1      	LDI  R30,LOW(1)
0005b8 e0f0      	LDI  R31,HIGH(1)
0005b9 c00a      	RJMP _0xBC
                 ; 0000 01AA          else if(win[r]==-3)
                 _0xAA:
0005ba 940e 0e01 	CALL SUBOPT_0x22
0005bc 940e 0e07 	CALL SUBOPT_0x23
0005be 3fed      	CPI  R30,LOW(0xFFFD)
0005bf efaf      	LDI  R26,HIGH(0xFFFD)
0005c0 07fa      	CPC  R31,R26
0005c1 f431      	BRNE _0xAC
                 ; 0000 01AB             state=-1;
0005c2 efef      	LDI  R30,LOW(65535)
0005c3 efff      	LDI  R31,HIGH(65535)
                 _0xBC:
0005c4 93e0 01a0 	STS  _state,R30
0005c6 93f0 01a1 	STS  _state+1,R31
                 ; 0000 01AC       if(count==9 && state==0)
                 _0xAC:
0005c8 940e 0d9e 	CALL SUBOPT_0x18
0005ca cfe0      	RJMP _0xA8
                 _0xA9:
0005cb e0e9      	LDI  R30,LOW(9)
0005cc e0f0      	LDI  R31,HIGH(9)
0005cd 15ec      	CP   R30,R12
0005ce 05fd      	CPC  R31,R13
0005cf f421      	BRNE _0xAE
0005d0 940e 0e1a 	CALL SUBOPT_0x26
0005d2 9710      	SBIW R26,0
0005d3 f009      	BREQ _0xAF
                 _0xAE:
0005d4 c006      	RJMP _0xAD
                 _0xAF:
                 ; 0000 01AD         state=2;
0005d5 e0e2      	LDI  R30,LOW(2)
0005d6 e0f0      	LDI  R31,HIGH(2)
0005d7 93e0 01a0 	STS  _state,R30
0005d9 93f0 01a1 	STS  _state+1,R31
                 ; 0000 01AE    }
                 _0xAD:
0005db cf04      	RJMP _0x89
                 _0x8B:
                 ; 0000 01AF 
                 ; 0000 01B0    if(state==1)
0005dc 940e 0e1a 	CALL SUBOPT_0x26
0005de 9711      	SBIW R26,1
0005df f429      	BRNE _0xB0
                 ; 0000 01B1        glcd_outtextxyf(70,50,"X win");
0005e0 940e 0e1f 	CALL SUBOPT_0x27
                +
0005e2 ebac     +LDI R26 , LOW ( 2 * _0x0 + ( 96 ) )
0005e3 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 96 ) )
                 	__POINTW2FN _0x0,96
0005e4 c013      	RJMP _0xBD
                 ; 0000 01B2    else if(state==-1)
                 _0xB0:
0005e5 940e 0e1a 	CALL SUBOPT_0x26
0005e7 3faf      	CPI  R26,LOW(0xFFFF)
0005e8 efef      	LDI  R30,HIGH(0xFFFF)
0005e9 07be      	CPC  R27,R30
0005ea f429      	BRNE _0xB2
                 ; 0000 01B3        glcd_outtextxyf(70,50,"O win");
0005eb 940e 0e1f 	CALL SUBOPT_0x27
                +
0005ed eca2     +LDI R26 , LOW ( 2 * _0x0 + ( 102 ) )
0005ee e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 102 ) )
                 	__POINTW2FN _0x0,102
0005ef c008      	RJMP _0xBD
                 ; 0000 01B4    else if(state==2)
                 _0xB2:
0005f0 940e 0e1a 	CALL SUBOPT_0x26
0005f2 9712      	SBIW R26,2
0005f3 f431      	BRNE _0xB4
                 ; 0000 01B5        glcd_outtextxyf(70,50,"Draw");
0005f4 940e 0e1f 	CALL SUBOPT_0x27
                +
0005f6 eca8     +LDI R26 , LOW ( 2 * _0x0 + ( 108 ) )
0005f7 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 108 ) )
                 	__POINTW2FN _0x0,108
                 _0xBD:
0005f8 940e 0a7b 	CALL _glcd_outtextxyf
                 ; 0000 01B6 }
                 _0xB4:
0005fa 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 01BA {
                 _main:
                 ; .FSTART _main
                 ; 0000 01BB 
                 ; 0000 01BC GLCDINIT_t glcd_init_data;
                 ; 0000 01BD 
                 ; 0000 01BE // Input/Output Ports initialization
                 ; 0000 01BF // Port A initialization
                 ; 0000 01C0 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 01C1 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0005fb 9726      	SBIW R28,6
                 ;	glcd_init_data -> Y+0
0005fc e0e0      	LDI  R30,LOW(0)
0005fd bbea      	OUT  0x1A,R30
                 ; 0000 01C2 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 01C3 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0005fe bbeb      	OUT  0x1B,R30
                 ; 0000 01C4 
                 ; 0000 01C5 // Port B initialization
                 ; 0000 01C6 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 01C7 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0005ff bbe7      	OUT  0x17,R30
                 ; 0000 01C8 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 01C9 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000600 bbe8      	OUT  0x18,R30
                 ; 0000 01CA 
                 ; 0000 01CB // Port C initialization
                 ; 0000 01CC // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 01CD DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000601 bbe4      	OUT  0x14,R30
                 ; 0000 01CE // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 01CF PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000602 bbe5      	OUT  0x15,R30
                 ; 0000 01D0 
                 ; 0000 01D1 // Port D initialization
                 ; 0000 01D2 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 01D3 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000603 bbe1      	OUT  0x11,R30
                 ; 0000 01D4 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 01D5 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000604 bbe2      	OUT  0x12,R30
                 ; 0000 01D6 
                 ; 0000 01D7 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000605 bfe3      	OUT  0x33,R30
                 ; 0000 01D8 TCNT0=0x00;
000606 bfe2      	OUT  0x32,R30
                 ; 0000 01D9 OCR0=0x00;
000607 bfec      	OUT  0x3C,R30
                 ; 0000 01DA 
                 ; 0000 01DB TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000608 bdef      	OUT  0x2F,R30
                 ; 0000 01DC TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000609 bdee      	OUT  0x2E,R30
                 ; 0000 01DD TCNT1H=0x00;
00060a bded      	OUT  0x2D,R30
                 ; 0000 01DE TCNT1L=0x00;
00060b bdec      	OUT  0x2C,R30
                 ; 0000 01DF ICR1H=0x00;
00060c bde7      	OUT  0x27,R30
                 ; 0000 01E0 ICR1L=0x00;
00060d bde6      	OUT  0x26,R30
                 ; 0000 01E1 OCR1AH=0x00;
00060e bdeb      	OUT  0x2B,R30
                 ; 0000 01E2 OCR1AL=0x00;
00060f bdea      	OUT  0x2A,R30
                 ; 0000 01E3 OCR1BH=0x00;
000610 bde9      	OUT  0x29,R30
                 ; 0000 01E4 OCR1BL=0x00;
000611 bde8      	OUT  0x28,R30
                 ; 0000 01E5 
                 ; 0000 01E6 ASSR=0<<AS2;
000612 bde2      	OUT  0x22,R30
                 ; 0000 01E7 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000613 bde5      	OUT  0x25,R30
                 ; 0000 01E8 TCNT2=0x00;
000614 bde4      	OUT  0x24,R30
                 ; 0000 01E9 OCR2=0x00;
000615 bde3      	OUT  0x23,R30
                 ; 0000 01EA 
                 ; 0000 01EB // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 01EC TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000616 bfe9      	OUT  0x39,R30
                 ; 0000 01ED 
                 ; 0000 01EE MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000617 bfe5      	OUT  0x35,R30
                 ; 0000 01EF MCUCSR=(0<<ISC2);
000618 bfe4      	OUT  0x34,R30
                 ; 0000 01F0 
                 ; 0000 01F1 // USART initialization
                 ; 0000 01F2 // USART disabled
                 ; 0000 01F3 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000619 b9ea      	OUT  0xA,R30
                 ; 0000 01F4 
                 ; 0000 01F5 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00061a e8e0      	LDI  R30,LOW(128)
00061b b9e8      	OUT  0x8,R30
                 ; 0000 01F6 SFIOR=(0<<ACME);
00061c e0e0      	LDI  R30,LOW(0)
00061d bfe0      	OUT  0x30,R30
                 ; 0000 01F7 
                 ; 0000 01F8 // ADC initialization
                 ; 0000 01F9 // ADC disabled
                 ; 0000 01FA ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00061e b9e6      	OUT  0x6,R30
                 ; 0000 01FB 
                 ; 0000 01FC // SPI initialization
                 ; 0000 01FD // SPI disabled
                 ; 0000 01FE SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00061f b9ed      	OUT  0xD,R30
                 ; 0000 01FF 
                 ; 0000 0200 // TWI initialization
                 ; 0000 0201 // TWI disabled
                 ; 0000 0202 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000620 bfe6      	OUT  0x36,R30
                 ; 0000 0203 
                 ; 0000 0204 glcd_init_data.font=font5x7;
000621 e5e4      	LDI  R30,LOW(_font5x7*2)
000622 e0f0      	LDI  R31,HIGH(_font5x7*2)
000623 83e8      	ST   Y,R30
000624 83f9      	STD  Y+1,R31
                 ; 0000 0205 // No function is used for reading
                 ; 0000 0206 // image data from external memory
                 ; 0000 0207 glcd_init_data.readxmem=NULL;
000625 e0e0      	LDI  R30,LOW(0)
000626 83ea      	STD  Y+2,R30
000627 83eb      	STD  Y+2+1,R30
                 ; 0000 0208 // No function is used for writing
                 ; 0000 0209 // image data to external memory
                 ; 0000 020A glcd_init_data.writexmem=NULL;
000628 83ec      	STD  Y+4,R30
000629 83ed      	STD  Y+4+1,R30
                 ; 0000 020B 
                 ; 0000 020C glcd_init(&glcd_init_data);
00062a 01de      	MOVW R26,R28
00062b d093      	RCALL _glcd_init
                 ; 0000 020D 
                 ; 0000 020E     PORTC=0xFF;
00062c efef      	LDI  R30,LOW(255)
00062d bbe5      	OUT  0x15,R30
                 ; 0000 020F    DDRC=0b00001111; //0x0F
00062e e0ef      	LDI  R30,LOW(15)
00062f bbe4      	OUT  0x14,R30
                 ; 0000 0210    init();
000630 dd66      	RCALL _init
                 ; 0000 0211    showBoard();
000631 ddf9      	RCALL _showBoard
                 ; 0000 0212    play();
000632 dead      	RCALL _play
                 ; 0000 0213 
                 ; 0000 0214 
                 ; 0000 0215    while(1)
                 _0xB5:
                 ; 0000 0216    {
                 ; 0000 0217        keypad();
000633 940e 0dcc 	CALL SUBOPT_0x1D
                 ; 0000 0218        k=r*4+c;
                 ; 0000 0219        if(k==13)
000635 940e 0dd9 	CALL SUBOPT_0x1E
000637 971d      	SBIW R26,13
000638 f409      	BRNE _0xB8
                 ; 0000 021A           init();
000639 dd5d      	RCALL _init
                 ; 0000 021B        showBoard();
                 _0xB8:
00063a ddf0      	RCALL _showBoard
                 ; 0000 021C        play();
00063b dea4      	RCALL _play
                 ; 0000 021D    }
00063c cff6      	RJMP _0xB5
                 ; 0000 021E }
                 _0xB9:
00063d cfff      	RJMP _0xB9
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _ks0108_enable_G100:
                 ; .FSTART _ks0108_enable_G100
00063e 0000      	nop
00063f 9ac0      	SBI  0x18,0
000640 0000      	nop
000641 9508      	RET
                 ; .FEND
                 _ks0108_disable_G100:
                 ; .FSTART _ks0108_disable_G100
000642 98c0      	CBI  0x18,0
000643 98c4      	CBI  0x18,4
000644 98c5      	CBI  0x18,5
000645 9508      	RET
                 ; .FEND
                 _ks0108_rdbus_G100:
                 ; .FSTART _ks0108_rdbus_G100
000646 931a      	ST   -Y,R17
000647 dff6      	RCALL _ks0108_enable_G100
000648 b319      	IN   R17,25
000649 98c0      	CBI  0x18,0
00064a 2fe1      	MOV  R30,R17
00064b 9119      	LD   R17,Y+
00064c 9508      	RET
                 ; .FEND
                 _ks0108_busy_G100:
                 ; .FSTART _ks0108_busy_G100
00064d 93aa      	ST   -Y,R26
00064e 931a      	ST   -Y,R17
00064f e0e0      	LDI  R30,LOW(0)
000650 bbea      	OUT  0x1A,R30
000651 9ac1      	SBI  0x18,1
000652 98c2      	CBI  0x18,2
000653 81e9      	LDD  R30,Y+1
000654 5fef      	SUBI R30,-LOW(1)
000655 2f1e      	MOV  R17,R30
000656 ff10      	SBRS R17,0
000657 c002      	RJMP _0x2000003
000658 9ac4      	SBI  0x18,4
000659 c001      	RJMP _0x2000004
                 _0x2000003:
00065a 98c4      	CBI  0x18,4
                 _0x2000004:
00065b ff11      	SBRS R17,1
00065c c002      	RJMP _0x2000005
00065d 9ac5      	SBI  0x18,5
00065e c001      	RJMP _0x2000006
                 _0x2000005:
00065f 98c5      	CBI  0x18,5
                 _0x2000006:
                 _0x2000007:
000660 dfe5      	RCALL _ks0108_rdbus_G100
000661 78e0      	ANDI R30,LOW(0x80)
000662 f7e9      	BRNE _0x2000007
000663 8118      	LDD  R17,Y+0
000664 c026      	RJMP _0x2120009
                 ; .FEND
                 _ks0108_wrcmd_G100:
                 ; .FSTART _ks0108_wrcmd_G100
000665 93aa      	ST   -Y,R26
000666 81a9      	LDD  R26,Y+1
000667 dfe5      	RCALL _ks0108_busy_G100
000668 940e 0e24 	CALL SUBOPT_0x28
00066a c020      	RJMP _0x2120009
                 ; .FEND
                 _ks0108_setloc_G100:
                 ; .FSTART _ks0108_setloc_G100
                +
00066b 91e0 01af+LDS R30 , _ks0108_coord_G100 + ( 1 )
                 	__GETB1MN _ks0108_coord_G100,1
00066d 93ea      	ST   -Y,R30
00066e 91e0 01ae 	LDS  R30,_ks0108_coord_G100
000670 73ef      	ANDI R30,LOW(0x3F)
000671 64e0      	ORI  R30,0x40
000672 2fae      	MOV  R26,R30
000673 dff1      	RCALL _ks0108_wrcmd_G100
                +
000674 91e0 01af+LDS R30 , _ks0108_coord_G100 + ( 1 )
                 	__GETB1MN _ks0108_coord_G100,1
000676 93ea      	ST   -Y,R30
                +
000677 91e0 01b0+LDS R30 , _ks0108_coord_G100 + ( 2 )
                 	__GETB1MN _ks0108_coord_G100,2
000679 6be8      	ORI  R30,LOW(0xB8)
00067a 2fae      	MOV  R26,R30
00067b dfe9      	RCALL _ks0108_wrcmd_G100
00067c 9508      	RET
                 ; .FEND
                 _ks0108_gotoxp_G100:
                 ; .FSTART _ks0108_gotoxp_G100
00067d 93aa      	ST   -Y,R26
00067e 81e9      	LDD  R30,Y+1
00067f 93e0 01ae 	STS  _ks0108_coord_G100,R30
000681 95e2      	SWAP R30
000682 70ef      	ANDI R30,0xF
000683 95e6      	LSR  R30
000684 95e6      	LSR  R30
                +
000685 93e0 01af+STS _ks0108_coord_G100 + ( 1 ) , R30
                 	__PUTB1MN _ks0108_coord_G100,1
000687 81e8      	LD   R30,Y
                +
000688 93e0 01b0+STS _ks0108_coord_G100 + ( 2 ) , R30
                 	__PUTB1MN _ks0108_coord_G100,2
00068a dfe0      	RCALL _ks0108_setloc_G100
                 _0x2120009:
00068b 9622      	ADIW R28,2
00068c 9508      	RET
                 ; .FEND
                 _ks0108_nextx_G100:
                 ; .FSTART _ks0108_nextx_G100
00068d 91a0 01ae 	LDS  R26,_ks0108_coord_G100
00068f 5faf      	SUBI R26,-LOW(1)
000690 93a0 01ae 	STS  _ks0108_coord_G100,R26
000692 38a0      	CPI  R26,LOW(0x80)
000693 f018      	BRLO _0x200000A
000694 e0e0      	LDI  R30,LOW(0)
000695 93e0 01ae 	STS  _ks0108_coord_G100,R30
                 _0x200000A:
000697 91e0 01ae 	LDS  R30,_ks0108_coord_G100
000699 73ef      	ANDI R30,LOW(0x3F)
00069a f431      	BRNE _0x200000B
00069b 91e0 01ae 	LDS  R30,_ks0108_coord_G100
00069d 93ea      	ST   -Y,R30
                +
00069e 91a0 01b0+LDS R26 , _ks0108_coord_G100 + ( 2 )
                 	__GETB2MN _ks0108_coord_G100,2
0006a0 dfdc      	RCALL _ks0108_gotoxp_G100
                 _0x200000B:
0006a1 9508      	RET
                 ; .FEND
                 _ks0108_wrdata_G100:
                 ; .FSTART _ks0108_wrdata_G100
0006a2 93aa      	ST   -Y,R26
                +
0006a3 91a0 01af+LDS R26 , _ks0108_coord_G100 + ( 1 )
                 	__GETB2MN _ks0108_coord_G100,1
0006a5 dfa7      	RCALL _ks0108_busy_G100
0006a6 9ac2      	SBI  0x18,2
0006a7 940e 0e24 	CALL SUBOPT_0x28
0006a9 9621      	ADIW R28,1
0006aa 9508      	RET
                 ; .FEND
                 _ks0108_rddata_G100:
                 ; .FSTART _ks0108_rddata_G100
                +
0006ab 91a0 01af+LDS R26 , _ks0108_coord_G100 + ( 1 )
                 	__GETB2MN _ks0108_coord_G100,1
0006ad df9f      	RCALL _ks0108_busy_G100
0006ae e0e0      	LDI  R30,LOW(0)
0006af bbea      	OUT  0x1A,R30
0006b0 9ac1      	SBI  0x18,1
0006b1 9ac2      	SBI  0x18,2
0006b2 df93      	RCALL _ks0108_rdbus_G100
0006b3 9508      	RET
                 ; .FEND
                 _ks0108_rdbyte_G100:
                 ; .FSTART _ks0108_rdbyte_G100
0006b4 93aa      	ST   -Y,R26
0006b5 81e9      	LDD  R30,Y+1
0006b6 93ea      	ST   -Y,R30
0006b7 81e9      	LDD  R30,Y+1
0006b8 940e 0e2d 	CALL SUBOPT_0x29
0006ba dff0      	RCALL _ks0108_rddata_G100
0006bb dfaf      	RCALL _ks0108_setloc_G100
0006bc dfee      	RCALL _ks0108_rddata_G100
0006bd 940c 0c92 	JMP  _0x2120003
                 ; .FEND
                 _glcd_init:
                 ; .FSTART _glcd_init
0006bf 93ba      	ST   -Y,R27
0006c0 93aa      	ST   -Y,R26
0006c1 931a      	ST   -Y,R17
0006c2 9ab8      	SBI  0x17,0
0006c3 9ab9      	SBI  0x17,1
0006c4 9aba      	SBI  0x17,2
0006c5 9abb      	SBI  0x17,3
0006c6 9ac3      	SBI  0x18,3
0006c7 9abc      	SBI  0x17,4
0006c8 9abd      	SBI  0x17,5
0006c9 df78      	RCALL _ks0108_disable_G100
0006ca 98c3      	CBI  0x18,3
0006cb e6a4      	LDI  R26,LOW(100)
0006cc e0b0      	LDI  R27,0
0006cd 940e 0ec7 	CALL _delay_ms
0006cf 9ac3      	SBI  0x18,3
0006d0 e010      	LDI  R17,LOW(0)
                 _0x200000C:
0006d1 3012      	CPI  R17,2
0006d2 f440      	BRSH _0x200000E
0006d3 931a      	ST   -Y,R17
0006d4 e3af      	LDI  R26,LOW(63)
0006d5 df8f      	RCALL _ks0108_wrcmd_G100
0006d6 931a      	ST   -Y,R17
0006d7 9513      	INC  R17
0006d8 eca0      	LDI  R26,LOW(192)
0006d9 df8b      	RCALL _ks0108_wrcmd_G100
0006da cff6      	RJMP _0x200000C
                 _0x200000E:
0006db e0e1      	LDI  R30,LOW(1)
0006dc 93e0 0161 	STS  _glcd_state,R30
0006de e0e0      	LDI  R30,LOW(0)
                +
0006df 93e0 0162+STS _glcd_state + ( 1 ) , R30
                 	__PUTB1MN _glcd_state,1
0006e1 81e9      	LDD  R30,Y+1
0006e2 81fa      	LDD  R31,Y+1+1
0006e3 9730      	SBIW R30,0
0006e4 f0a9      	BREQ _0x200000F
0006e5 81a9      	LDD  R26,Y+1
0006e6 81ba      	LDD  R27,Y+1+1
0006e7 940e 0f31 	CALL __GETW1P
                +
0006e9 93e0 0165+STS _glcd_state + ( 4 ) , R30
0006eb 93f0 0166+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
0006ed 9612      	ADIW R26,2
0006ee 940e 0f31 	CALL __GETW1P
                +
0006f0 93e0 017a+STS _glcd_state + ( 25 ) , R30
0006f2 93f0 017b+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
0006f4 81a9      	LDD  R26,Y+1
0006f5 81ba      	LDD  R27,Y+1+1
0006f6 9614      	ADIW R26,4
0006f7 940e 0f31 	CALL __GETW1P
0006f9 c00a      	RJMP _0x20000AC
                 _0x200000F:
0006fa e0e0      	LDI  R30,LOW(0)
0006fb e0f0      	LDI  R31,HIGH(0)
                +
0006fc 93e0 0165+STS _glcd_state + ( 4 ) , R30
0006fe 93f0 0166+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
                +
000700 93e0 017a+STS _glcd_state + ( 25 ) , R30
000702 93f0 017b+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
                 _0x20000AC:
                +
000704 93e0 017c+STS _glcd_state + ( 27 ) , R30
000706 93f0 017d+STS _glcd_state + ( 27 ) + 1 , R31
                 	__PUTW1MN _glcd_state,27
000708 e0e1      	LDI  R30,LOW(1)
                +
000709 93e0 0167+STS _glcd_state + ( 6 ) , R30
                 	__PUTB1MN _glcd_state,6
                +
00070b 93e0 0168+STS _glcd_state + ( 7 ) , R30
                 	__PUTB1MN _glcd_state,7
                +
00070d 93e0 0169+STS _glcd_state + ( 8 ) , R30
                 	__PUTB1MN _glcd_state,8
00070f efef      	LDI  R30,LOW(255)
                +
000710 93e0 016a+STS _glcd_state + ( 9 ) , R30
                 	__PUTB1MN _glcd_state,9
000712 e0e1      	LDI  R30,LOW(1)
                +
000713 93e0 0171+STS _glcd_state + ( 16 ) , R30
                 	__PUTB1MN _glcd_state,16
                +
000715 e7e2     +LDI R30 , LOW ( _glcd_state + ( 17 ) )
000716 e0f1     +LDI R31 , HIGH ( _glcd_state + ( 17 ) )
                 	__POINTW1MN _glcd_state,17
000717 93fa      	ST   -Y,R31
000718 93ea      	ST   -Y,R30
000719 efef      	LDI  R30,LOW(255)
00071a 93ea      	ST   -Y,R30
00071b e0a8      	LDI  R26,LOW(8)
00071c e0b0      	LDI  R27,0
00071d 940e 0c53 	CALL _memset
00071f d004      	RCALL _glcd_clear
000720 e0e1      	LDI  R30,LOW(1)
000721 8118      	LDD  R17,Y+0
000722 940c 0cd9 	JMP  _0x2120002
                 ; .FEND
                 _glcd_clear:
                 ; .FSTART _glcd_clear
000724 940e 0f61 	CALL __SAVELOCR4
000726 e000      	LDI  R16,0
000727 e030      	LDI  R19,0
                +
000728 91e0 0162+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
00072a 30e0      	CPI  R30,0
00072b f009      	BREQ _0x2000015
00072c ef0f      	LDI  R16,LOW(255)
                 _0x2000015:
                 _0x2000016:
00072d 3038      	CPI  R19,8
00072e f478      	BRSH _0x2000018
00072f e0e0      	LDI  R30,LOW(0)
000730 93ea      	ST   -Y,R30
000731 2fa3      	MOV  R26,R19
000732 5f3f      	SUBI R19,-1
000733 df49      	RCALL _ks0108_gotoxp_G100
000734 e010      	LDI  R17,LOW(0)
                 _0x2000019:
000735 2fa1      	MOV  R26,R17
000736 5f1f      	SUBI R17,-1
000737 38a0      	CPI  R26,LOW(0x80)
000738 f420      	BRSH _0x200001B
000739 2fa0      	MOV  R26,R16
00073a 940e 0e33 	CALL SUBOPT_0x2A
00073c cff8      	RJMP _0x2000019
                 _0x200001B:
00073d cfef      	RJMP _0x2000016
                 _0x2000018:
00073e e0e0      	LDI  R30,LOW(0)
00073f 93ea      	ST   -Y,R30
000740 e0a0      	LDI  R26,LOW(0)
000741 df3b      	RCALL _ks0108_gotoxp_G100
000742 e0e0      	LDI  R30,LOW(0)
000743 93ea      	ST   -Y,R30
000744 e0a0      	LDI  R26,LOW(0)
000745 d35d      	RCALL _glcd_moveto
000746 940e 0f68 	CALL __LOADLOCR4
000748 940c 0cf8 	JMP  _0x2120001
                 ; .FEND
                 _ks0108_wrmasked_G100:
                 ; .FSTART _ks0108_wrmasked_G100
00074a 93aa      	ST   -Y,R26
00074b 931a      	ST   -Y,R17
00074c 81ed      	LDD  R30,Y+5
00074d 93ea      	ST   -Y,R30
00074e 81ad      	LDD  R26,Y+5
00074f df64      	RCALL _ks0108_rdbyte_G100
000750 2f1e      	MOV  R17,R30
000751 df19      	RCALL _ks0108_setloc_G100
000752 81e9      	LDD  R30,Y+1
000753 30e7      	CPI  R30,LOW(0x7)
000754 f011      	BREQ _0x200002B
000755 30e8      	CPI  R30,LOW(0x8)
000756 f439      	BRNE _0x200002C
                 _0x200002B:
000757 81eb      	LDD  R30,Y+3
000758 93ea      	ST   -Y,R30
000759 81aa      	LDD  R26,Y+2
00075a 940e 0c94 	CALL _glcd_mappixcolor1bit
00075c 83eb      	STD  Y+3,R30
00075d c008      	RJMP _0x200002D
                 _0x200002C:
00075e 30e3      	CPI  R30,LOW(0x3)
00075f f421      	BRNE _0x200002F
000760 81eb      	LDD  R30,Y+3
000761 95e0      	COM  R30
000762 83eb      	STD  Y+3,R30
000763 c002      	RJMP _0x2000030
                 _0x200002F:
000764 30e0      	CPI  R30,0
000765 f421      	BRNE _0x2000031
                 _0x2000030:
                 _0x200002D:
000766 81ea      	LDD  R30,Y+2
000767 95e0      	COM  R30
000768 231e      	AND  R17,R30
000769 c002      	RJMP _0x2000032
                 _0x2000031:
00076a 30e2      	CPI  R30,LOW(0x2)
00076b f429      	BRNE _0x2000033
                 _0x2000032:
00076c 81ea      	LDD  R30,Y+2
00076d 81ab      	LDD  R26,Y+3
00076e 23ea      	AND  R30,R26
00076f 2b1e      	OR   R17,R30
000770 c00e      	RJMP _0x2000029
                 _0x2000033:
000771 30e1      	CPI  R30,LOW(0x1)
000772 f429      	BRNE _0x2000034
000773 81ea      	LDD  R30,Y+2
000774 81ab      	LDD  R26,Y+3
000775 23ea      	AND  R30,R26
000776 271e      	EOR  R17,R30
000777 c007      	RJMP _0x2000029
                 _0x2000034:
000778 30e4      	CPI  R30,LOW(0x4)
000779 f429      	BRNE _0x2000029
00077a 81ea      	LDD  R30,Y+2
00077b 95e0      	COM  R30
00077c 81ab      	LDD  R26,Y+3
00077d 2bea      	OR   R30,R26
00077e 231e      	AND  R17,R30
                 _0x2000029:
00077f 2fa1      	MOV  R26,R17
000780 940e 0e33 	CALL SUBOPT_0x2A
000782 8118      	LDD  R17,Y+0
000783 9626      	ADIW R28,6
000784 9508      	RET
                 ; .FEND
                 _glcd_block:
                 ; .FSTART _glcd_block
000785 93aa      	ST   -Y,R26
000786 9723      	SBIW R28,3
000787 940e 0f5f 	CALL __SAVELOCR6
000789 89a8      	LDD  R26,Y+16
00078a 38a0      	CPI  R26,LOW(0x80)
00078b f448      	BRSH _0x2000037
00078c 85af      	LDD  R26,Y+15
00078d 34a0      	CPI  R26,LOW(0x40)
00078e f430      	BRSH _0x2000037
00078f 85ae      	LDD  R26,Y+14
000790 30a0      	CPI  R26,LOW(0x0)
000791 f019      	BREQ _0x2000037
000792 85ad      	LDD  R26,Y+13
000793 30a0      	CPI  R26,LOW(0x0)
000794 f409      	BRNE _0x2000036
                 _0x2000037:
000795 c1c8      	RJMP _0x2120008
                 _0x2000036:
000796 85ee      	LDD  R30,Y+14
000797 87e8      	STD  Y+8,R30
000798 89a8      	LDD  R26,Y+16
000799 27bb      	CLR  R27
00079a 85ee      	LDD  R30,Y+14
00079b e0f0      	LDI  R31,0
00079c 0fae      	ADD  R26,R30
00079d 1fbf      	ADC  R27,R31
00079e 38a1      	CPI  R26,LOW(0x81)
00079f e0e0      	LDI  R30,HIGH(0x81)
0007a0 07be      	CPC  R27,R30
0007a1 f020      	BRLO _0x2000039
0007a2 89a8      	LDD  R26,Y+16
0007a3 e8e0      	LDI  R30,LOW(128)
0007a4 1bea      	SUB  R30,R26
0007a5 87ee      	STD  Y+14,R30
                 _0x2000039:
0007a6 852d      	LDD  R18,Y+13
0007a7 85af      	LDD  R26,Y+15
0007a8 27bb      	CLR  R27
0007a9 85ed      	LDD  R30,Y+13
0007aa e0f0      	LDI  R31,0
0007ab 0fae      	ADD  R26,R30
0007ac 1fbf      	ADC  R27,R31
0007ad 34a1      	CPI  R26,LOW(0x41)
0007ae e0e0      	LDI  R30,HIGH(0x41)
0007af 07be      	CPC  R27,R30
0007b0 f020      	BRLO _0x200003A
0007b1 85af      	LDD  R26,Y+15
0007b2 e4e0      	LDI  R30,LOW(64)
0007b3 1bea      	SUB  R30,R26
0007b4 87ed      	STD  Y+13,R30
                 _0x200003A:
0007b5 85a9      	LDD  R26,Y+9
0007b6 30a6      	CPI  R26,LOW(0x6)
0007b7 f009      	BREQ PC+2
0007b8 c05b      	RJMP _0x200003B
0007b9 85ec      	LDD  R30,Y+12
0007ba 30e1      	CPI  R30,LOW(0x1)
0007bb f409      	BRNE _0x200003F
0007bc c1a1      	RJMP _0x2120008
                 _0x200003F:
0007bd 30e3      	CPI  R30,LOW(0x3)
0007be f439      	BRNE _0x2000042
                +
0007bf 91e0 017c+LDS R30 , _glcd_state + ( 27 )
0007c1 91f0 017d+LDS R31 , _glcd_state + ( 27 ) + 1
                 	__GETW1MN _glcd_state,27
0007c3 9730      	SBIW R30,0
0007c4 f409      	BRNE _0x2000041
0007c5 c198      	RJMP _0x2120008
                 _0x2000041:
                 _0x2000042:
0007c6 8508      	LDD  R16,Y+8
0007c7 85ed      	LDD  R30,Y+13
0007c8 95e6      	LSR  R30
0007c9 95e6      	LSR  R30
0007ca 95e6      	LSR  R30
0007cb 2f3e      	MOV  R19,R30
0007cc 2fe2      	MOV  R30,R18
0007cd 70e7      	ANDI R30,LOW(0x7)
0007ce f419      	BRNE _0x2000044
0007cf 85ad      	LDD  R26,Y+13
0007d0 172a      	CP   R18,R26
0007d1 f0e9      	BREQ _0x2000043
                 _0x2000044:
0007d2 2fa0      	MOV  R26,R16
0007d3 27bb      	CLR  R27
0007d4 2fe3      	MOV  R30,R19
0007d5 e0f0      	LDI  R31,0
0007d6 940e 0efd 	CALL __MULW12U
0007d8 85aa      	LDD  R26,Y+10
0007d9 85bb      	LDD  R27,Y+10+1
0007da 940e 0e37 	CALL SUBOPT_0x2B
0007dc 9526      	LSR  R18
0007dd 9526      	LSR  R18
0007de 9526      	LSR  R18
0007df 2f53      	MOV  R21,R19
                 _0x2000046:
0007e0 935f      	PUSH R21
0007e1 5f5f      	SUBI R21,-1
0007e2 2fe2      	MOV  R30,R18
0007e3 91af      	POP  R26
0007e4 17ea      	CP   R30,R26
0007e5 f048      	BRLO _0x2000048
0007e6 2f10      	MOV  R17,R16
                 _0x2000049:
0007e7 2fe1      	MOV  R30,R17
0007e8 5011      	SUBI R17,1
0007e9 30e0      	CPI  R30,0
0007ea f019      	BREQ _0x200004B
0007eb 940e 0e3c 	CALL SUBOPT_0x2C
0007ed cff9      	RJMP _0x2000049
                 _0x200004B:
0007ee cff1      	RJMP _0x2000046
                 _0x2000048:
                 _0x2000043:
0007ef 85ae      	LDD  R26,Y+14
0007f0 170a      	CP   R16,R26
0007f1 f111      	BREQ _0x200004C
0007f2 85ee      	LDD  R30,Y+14
0007f3 85aa      	LDD  R26,Y+10
0007f4 85bb      	LDD  R27,Y+10+1
0007f5 e0f0      	LDI  R31,0
0007f6 940e 0e37 	CALL SUBOPT_0x2B
0007f8 85ed      	LDD  R30,Y+13
0007f9 70e7      	ANDI R30,LOW(0x7)
0007fa f009      	BREQ _0x200004D
0007fb 5f3f      	SUBI R19,-LOW(1)
                 _0x200004D:
0007fc e020      	LDI  R18,LOW(0)
                 _0x200004E:
0007fd 932f      	PUSH R18
0007fe 5f2f      	SUBI R18,-1
0007ff 2fe3      	MOV  R30,R19
000800 91af      	POP  R26
000801 17ae      	CP   R26,R30
000802 f488      	BRSH _0x2000050
000803 851e      	LDD  R17,Y+14
                 _0x2000051:
000804 931f      	PUSH R17
000805 5f1f      	SUBI R17,-1
000806 2fe0      	MOV  R30,R16
000807 91af      	POP  R26
000808 17ae      	CP   R26,R30
000809 f418      	BRSH _0x2000053
00080a 940e 0e3c 	CALL SUBOPT_0x2C
00080c cff7      	RJMP _0x2000051
                 _0x2000053:
00080d 85ee      	LDD  R30,Y+14
00080e 81ae      	LDD  R26,Y+6
00080f 81bf      	LDD  R27,Y+6+1
000810 e0f0      	LDI  R31,0
000811 940e 0e37 	CALL SUBOPT_0x2B
000813 cfe9      	RJMP _0x200004E
                 _0x2000050:
                 _0x200004C:
                 _0x200003B:
000814 85ef      	LDD  R30,Y+15
000815 70e7      	ANDI R30,LOW(0x7)
000816 2f3e      	MOV  R19,R30
                 _0x2000054:
000817 85ed      	LDD  R30,Y+13
000818 30e0      	CPI  R30,0
000819 f409      	BRNE PC+2
00081a c143      	RJMP _0x2000056
00081b 85ea      	LDD  R30,Y+10
00081c 85fb      	LDD  R31,Y+10+1
00081d 83ee      	STD  Y+6,R30
00081e 83ff      	STD  Y+6+1,R31
00081f e010      	LDI  R17,LOW(0)
000820 8908      	LDD  R16,Y+16
000821 3030      	CPI  R19,0
000822 f009      	BREQ PC+2
000823 c065      	RJMP _0x2000057
000824 85ad      	LDD  R26,Y+13
000825 30a8      	CPI  R26,LOW(0x8)
000826 f408      	BRSH PC+2
000827 c05c      	RJMP _0x2000058
000828 85e9      	LDD  R30,Y+9
000829 30e0      	CPI  R30,0
00082a f011      	BREQ _0x200005D
00082b 30e3      	CPI  R30,LOW(0x3)
00082c f409      	BRNE _0x200005E
                 _0x200005D:
00082d c002      	RJMP _0x200005F
                 _0x200005E:
00082e 30e7      	CPI  R30,LOW(0x7)
00082f f409      	BRNE _0x2000060
                 _0x200005F:
000830 c002      	RJMP _0x2000061
                 _0x2000060:
000831 30e8      	CPI  R30,LOW(0x8)
000832 f409      	BRNE _0x2000062
                 _0x2000061:
000833 c002      	RJMP _0x2000063
                 _0x2000062:
000834 30e6      	CPI  R30,LOW(0x6)
000835 f409      	BRNE _0x2000064
                 _0x2000063:
000836 c002      	RJMP _0x2000065
                 _0x2000064:
000837 30e9      	CPI  R30,LOW(0x9)
000838 f409      	BRNE _0x2000066
                 _0x2000065:
000839 c002      	RJMP _0x2000067
                 _0x2000066:
00083a 30ea      	CPI  R30,LOW(0xA)
00083b f421      	BRNE _0x200005B
                 _0x2000067:
00083c 930a      	ST   -Y,R16
00083d 89e8      	LDD  R30,Y+16
00083e 940e 0e2d 	CALL SUBOPT_0x29
                 _0x200005B:
                 _0x2000069:
000840 931f      	PUSH R17
000841 5f1f      	SUBI R17,-1
000842 85ee      	LDD  R30,Y+14
000843 91af      	POP  R26
000844 17ae      	CP   R26,R30
000845 f5b8      	BRSH _0x200006B
000846 85a9      	LDD  R26,Y+9
000847 30a6      	CPI  R26,LOW(0x6)
000848 f461      	BRNE _0x200006C
000849 de61      	RCALL _ks0108_rddata_G100
00084a de20      	RCALL _ks0108_setloc_G100
00084b 940e 0e49 	CALL SUBOPT_0x2D
00084d 93fa      	ST   -Y,R31
00084e 93ea      	ST   -Y,R30
00084f de5b      	RCALL _ks0108_rddata_G100
000850 2fae      	MOV  R26,R30
000851 940e 0cdb 	CALL _glcd_writemem
000853 de39      	RCALL _ks0108_nextx_G100
000854 c027      	RJMP _0x200006D
                 _0x200006C:
000855 85e9      	LDD  R30,Y+9
000856 30e9      	CPI  R30,LOW(0x9)
000857 f411      	BRNE _0x2000071
000858 e050      	LDI  R21,LOW(0)
000859 c00e      	RJMP _0x2000072
                 _0x2000071:
00085a 30ea      	CPI  R30,LOW(0xA)
00085b f411      	BRNE _0x2000070
00085c ef5f      	LDI  R21,LOW(255)
00085d c00a      	RJMP _0x2000072
                 _0x2000070:
00085e 940e 0e49 	CALL SUBOPT_0x2D
000860 940e 0e52 	CALL SUBOPT_0x2E
000862 2f5e      	MOV  R21,R30
000863 85e9      	LDD  R30,Y+9
000864 30e7      	CPI  R30,LOW(0x7)
000865 f011      	BREQ _0x2000079
000866 30e8      	CPI  R30,LOW(0x8)
000867 f421      	BRNE _0x200007A
                 _0x2000079:
                 _0x2000072:
000868 940e 0e58 	CALL SUBOPT_0x2F
00086a 2f5e      	MOV  R21,R30
00086b c006      	RJMP _0x200007B
                 _0x200007A:
00086c 30e3      	CPI  R30,LOW(0x3)
00086d f411      	BRNE _0x200007D
00086e 9550      	COM  R21
00086f c002      	RJMP _0x200007E
                 _0x200007D:
000870 30e0      	CPI  R30,0
000871 f421      	BRNE _0x2000080
                 _0x200007E:
                 _0x200007B:
000872 2fa5      	MOV  R26,R21
000873 940e 0e33 	CALL SUBOPT_0x2A
000875 c006      	RJMP _0x2000077
                 _0x2000080:
000876 940e 0e5c 	CALL SUBOPT_0x30
000878 efef      	LDI  R30,LOW(255)
000879 93ea      	ST   -Y,R30
00087a 85ad      	LDD  R26,Y+13
00087b dece      	RCALL _ks0108_wrmasked_G100
                 _0x2000077:
                 _0x200006D:
00087c cfc3      	RJMP _0x2000069
                 _0x200006B:
00087d 85ef      	LDD  R30,Y+15
00087e 5fe8      	SUBI R30,-LOW(8)
00087f 87ef      	STD  Y+15,R30
000880 85ed      	LDD  R30,Y+13
000881 50e8      	SUBI R30,LOW(8)
000882 87ed      	STD  Y+13,R30
000883 c0d1      	RJMP _0x2000081
                 _0x2000058:
000884 855d      	LDD  R21,Y+13
000885 e020      	LDI  R18,LOW(0)
000886 e0e0      	LDI  R30,LOW(0)
000887 87ed      	STD  Y+13,R30
000888 c07a      	RJMP _0x2000082
                 _0x2000057:
000889 2fe3      	MOV  R30,R19
00088a 85ad      	LDD  R26,Y+13
00088b 0fae      	ADD  R26,R30
00088c 30a9      	CPI  R26,LOW(0x9)
00088d f420      	BRSH _0x2000083
00088e 852d      	LDD  R18,Y+13
00088f e0e0      	LDI  R30,LOW(0)
000890 87ed      	STD  Y+13,R30
000891 c003      	RJMP _0x2000084
                 _0x2000083:
000892 e0e8      	LDI  R30,LOW(8)
000893 1be3      	SUB  R30,R19
000894 2f2e      	MOV  R18,R30
                 _0x2000084:
000895 933a      	ST   -Y,R19
000896 2fa2      	MOV  R26,R18
000897 940e 0c89 	CALL _glcd_getmask
000899 2f4e      	MOV  R20,R30
00089a 85e9      	LDD  R30,Y+9
00089b 30e6      	CPI  R30,LOW(0x6)
00089c f4f1      	BRNE _0x2000088
                 _0x2000089:
00089d 931f      	PUSH R17
00089e 5f1f      	SUBI R17,-1
00089f 85ee      	LDD  R30,Y+14
0008a0 91af      	POP  R26
0008a1 17ae      	CP   R26,R30
0008a2 f4b8      	BRSH _0x200008B
0008a3 940e 0e62 	CALL SUBOPT_0x31
0008a5 2fae      	MOV  R26,R30
0008a6 2fe3      	MOV  R30,R19
0008a7 940e 0ee1 	CALL __LSRB12
0008a9 940e 0e69 	CALL SUBOPT_0x32
0008ab 2fe3      	MOV  R30,R19
0008ac 2fa4      	MOV  R26,R20
0008ad 940e 0ee1 	CALL __LSRB12
0008af 95e0      	COM  R30
0008b0 21e1      	AND  R30,R1
0008b1 2b5e      	OR   R21,R30
0008b2 940e 0e49 	CALL SUBOPT_0x2D
0008b4 93fa      	ST   -Y,R31
0008b5 93ea      	ST   -Y,R30
0008b6 2fa5      	MOV  R26,R21
0008b7 940e 0cdb 	CALL _glcd_writemem
0008b9 cfe3      	RJMP _0x2000089
                 _0x200008B:
0008ba c02c      	RJMP _0x2000087
                 _0x2000088:
0008bb 30e9      	CPI  R30,LOW(0x9)
0008bc f411      	BRNE _0x200008C
0008bd e050      	LDI  R21,LOW(0)
0008be c003      	RJMP _0x200008D
                 _0x200008C:
0008bf 30ea      	CPI  R30,LOW(0xA)
0008c0 f4a9      	BRNE _0x2000093
0008c1 ef5f      	LDI  R21,LOW(255)
                 _0x200008D:
0008c2 940e 0e58 	CALL SUBOPT_0x2F
0008c4 2fae      	MOV  R26,R30
0008c5 2fe3      	MOV  R30,R19
0008c6 940e 0ed9 	CALL __LSLB12
0008c8 2f5e      	MOV  R21,R30
                 _0x2000090:
0008c9 931f      	PUSH R17
0008ca 5f1f      	SUBI R17,-1
0008cb 85ee      	LDD  R30,Y+14
0008cc 91af      	POP  R26
0008cd 17ae      	CP   R26,R30
0008ce f430      	BRSH _0x2000092
0008cf 940e 0e5c 	CALL SUBOPT_0x30
0008d1 934a      	ST   -Y,R20
0008d2 e0a0      	LDI  R26,LOW(0)
0008d3 de76      	RCALL _ks0108_wrmasked_G100
0008d4 cff4      	RJMP _0x2000090
                 _0x2000092:
0008d5 c011      	RJMP _0x2000087
                 _0x2000093:
                 _0x2000094:
0008d6 931f      	PUSH R17
0008d7 5f1f      	SUBI R17,-1
0008d8 85ee      	LDD  R30,Y+14
0008d9 91af      	POP  R26
0008da 17ae      	CP   R26,R30
0008db f458      	BRSH _0x2000096
0008dc 940e 0e74 	CALL SUBOPT_0x33
0008de 2fae      	MOV  R26,R30
0008df 2fe3      	MOV  R30,R19
0008e0 940e 0ed9 	CALL __LSLB12
0008e2 93ea      	ST   -Y,R30
0008e3 934a      	ST   -Y,R20
0008e4 85ad      	LDD  R26,Y+13
0008e5 de64      	RCALL _ks0108_wrmasked_G100
0008e6 cfef      	RJMP _0x2000094
                 _0x2000096:
                 _0x2000087:
0008e7 85ed      	LDD  R30,Y+13
0008e8 30e0      	CPI  R30,0
0008e9 f409      	BRNE _0x2000097
0008ea c073      	RJMP _0x2000056
                 _0x2000097:
0008eb 85ad      	LDD  R26,Y+13
0008ec 30a8      	CPI  R26,LOW(0x8)
0008ed f428      	BRSH _0x2000098
0008ee 85ed      	LDD  R30,Y+13
0008ef 1be2      	SUB  R30,R18
0008f0 2f5e      	MOV  R21,R30
0008f1 e0e0      	LDI  R30,LOW(0)
0008f2 c003      	RJMP _0x20000AD
                 _0x2000098:
0008f3 2f53      	MOV  R21,R19
0008f4 85ed      	LDD  R30,Y+13
0008f5 50e8      	SUBI R30,LOW(8)
                 _0x20000AD:
0008f6 87ed      	STD  Y+13,R30
0008f7 e010      	LDI  R17,LOW(0)
0008f8 85ef      	LDD  R30,Y+15
0008f9 5fe8      	SUBI R30,-LOW(8)
0008fa 87ef      	STD  Y+15,R30
0008fb e0e8      	LDI  R30,LOW(8)
0008fc 1be3      	SUB  R30,R19
0008fd 2f2e      	MOV  R18,R30
0008fe 8908      	LDD  R16,Y+16
0008ff 85ea      	LDD  R30,Y+10
000900 85fb      	LDD  R31,Y+10+1
000901 83ee      	STD  Y+6,R30
000902 83ff      	STD  Y+6+1,R31
                 _0x2000082:
000903 2fe5      	MOV  R30,R21
000904 e0f0      	LDI  R31,0
000905 5ce8      	SUBI R30,LOW(-__glcd_mask*2)
000906 4ffd      	SBCI R31,HIGH(-__glcd_mask*2)
000907 9144      	LPM  R20,Z
000908 85e9      	LDD  R30,Y+9
000909 30e6      	CPI  R30,LOW(0x6)
00090a f4f1      	BRNE _0x200009D
                 _0x200009E:
00090b 931f      	PUSH R17
00090c 5f1f      	SUBI R17,-1
00090d 85ee      	LDD  R30,Y+14
00090e 91af      	POP  R26
00090f 17ae      	CP   R26,R30
000910 f4b8      	BRSH _0x20000A0
000911 940e 0e62 	CALL SUBOPT_0x31
000913 2fae      	MOV  R26,R30
000914 2fe2      	MOV  R30,R18
000915 940e 0ed9 	CALL __LSLB12
000917 940e 0e69 	CALL SUBOPT_0x32
000919 2fe2      	MOV  R30,R18
00091a 2fa4      	MOV  R26,R20
00091b 940e 0ed9 	CALL __LSLB12
00091d 95e0      	COM  R30
00091e 21e1      	AND  R30,R1
00091f 2b5e      	OR   R21,R30
000920 940e 0e49 	CALL SUBOPT_0x2D
000922 93fa      	ST   -Y,R31
000923 93ea      	ST   -Y,R30
000924 2fa5      	MOV  R26,R21
000925 940e 0cdb 	CALL _glcd_writemem
000927 cfe3      	RJMP _0x200009E
                 _0x20000A0:
000928 c02c      	RJMP _0x200009C
                 _0x200009D:
000929 30e9      	CPI  R30,LOW(0x9)
00092a f411      	BRNE _0x20000A1
00092b e050      	LDI  R21,LOW(0)
00092c c003      	RJMP _0x20000A2
                 _0x20000A1:
00092d 30ea      	CPI  R30,LOW(0xA)
00092e f4a9      	BRNE _0x20000A8
00092f ef5f      	LDI  R21,LOW(255)
                 _0x20000A2:
000930 940e 0e58 	CALL SUBOPT_0x2F
000932 2fae      	MOV  R26,R30
000933 2fe2      	MOV  R30,R18
000934 940e 0ee1 	CALL __LSRB12
000936 2f5e      	MOV  R21,R30
                 _0x20000A5:
000937 931f      	PUSH R17
000938 5f1f      	SUBI R17,-1
000939 85ee      	LDD  R30,Y+14
00093a 91af      	POP  R26
00093b 17ae      	CP   R26,R30
00093c f430      	BRSH _0x20000A7
00093d 940e 0e5c 	CALL SUBOPT_0x30
00093f 934a      	ST   -Y,R20
000940 e0a0      	LDI  R26,LOW(0)
000941 de08      	RCALL _ks0108_wrmasked_G100
000942 cff4      	RJMP _0x20000A5
                 _0x20000A7:
000943 c011      	RJMP _0x200009C
                 _0x20000A8:
                 _0x20000A9:
000944 931f      	PUSH R17
000945 5f1f      	SUBI R17,-1
000946 85ee      	LDD  R30,Y+14
000947 91af      	POP  R26
000948 17ae      	CP   R26,R30
000949 f458      	BRSH _0x20000AB
00094a 940e 0e74 	CALL SUBOPT_0x33
00094c 2fae      	MOV  R26,R30
00094d 2fe2      	MOV  R30,R18
00094e 940e 0ee1 	CALL __LSRB12
000950 93ea      	ST   -Y,R30
000951 934a      	ST   -Y,R20
000952 85ad      	LDD  R26,Y+13
000953 ddf6      	RCALL _ks0108_wrmasked_G100
000954 cfef      	RJMP _0x20000A9
                 _0x20000AB:
                 _0x200009C:
                 _0x2000081:
000955 85e8      	LDD  R30,Y+8
000956 85aa      	LDD  R26,Y+10
000957 85bb      	LDD  R27,Y+10+1
000958 e0f0      	LDI  R31,0
000959 0fea      	ADD  R30,R26
00095a 1ffb      	ADC  R31,R27
00095b 87ea      	STD  Y+10,R30
00095c 87fb      	STD  Y+10+1,R31
00095d ceb9      	RJMP _0x2000054
                 _0x2000056:
                 _0x2120008:
00095e 940e 0f66 	CALL __LOADLOCR6
000960 9661      	ADIW R28,17
000961 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _glcd_clipx:
                 ; .FSTART _glcd_clipx
000962 940e 0e81 	CALL SUBOPT_0x34
000964 f024      	BRLT _0x2020003
000965 e0e0      	LDI  R30,LOW(0)
000966 e0f0      	LDI  R31,HIGH(0)
000967 940c 0c92 	JMP  _0x2120003
                 _0x2020003:
000969 81a8      	LD   R26,Y
00096a 81b9      	LDD  R27,Y+1
00096b 38a0      	CPI  R26,LOW(0x80)
00096c e0e0      	LDI  R30,HIGH(0x80)
00096d 07be      	CPC  R27,R30
00096e f024      	BRLT _0x2020004
00096f e7ef      	LDI  R30,LOW(127)
000970 e0f0      	LDI  R31,HIGH(127)
000971 940c 0c92 	JMP  _0x2120003
                 _0x2020004:
000973 81e8      	LD   R30,Y
000974 81f9      	LDD  R31,Y+1
000975 940c 0c92 	JMP  _0x2120003
                 ; .FEND
                 _glcd_clipy:
                 ; .FSTART _glcd_clipy
000977 940e 0e81 	CALL SUBOPT_0x34
000979 f024      	BRLT _0x2020005
00097a e0e0      	LDI  R30,LOW(0)
00097b e0f0      	LDI  R31,HIGH(0)
00097c 940c 0c92 	JMP  _0x2120003
                 _0x2020005:
00097e 81a8      	LD   R26,Y
00097f 81b9      	LDD  R27,Y+1
000980 34a0      	CPI  R26,LOW(0x40)
000981 e0e0      	LDI  R30,HIGH(0x40)
000982 07be      	CPC  R27,R30
000983 f024      	BRLT _0x2020006
000984 e3ef      	LDI  R30,LOW(63)
000985 e0f0      	LDI  R31,HIGH(63)
000986 940c 0c92 	JMP  _0x2120003
                 _0x2020006:
000988 81e8      	LD   R30,Y
000989 81f9      	LDD  R31,Y+1
00098a 940c 0c92 	JMP  _0x2120003
                 ; .FEND
                 _glcd_getcharw_G101:
                 ; .FSTART _glcd_getcharw_G101
00098c 93ba      	ST   -Y,R27
00098d 93aa      	ST   -Y,R26
00098e 9723      	SBIW R28,3
00098f 940e 0e88 	CALL SUBOPT_0x35
000991 018f      	MOVW R16,R30
000992 2e00      	MOV  R0,R16
000993 2a01      	OR   R0,R17
000994 f419      	BRNE _0x202000B
000995 e0e0      	LDI  R30,LOW(0)
000996 e0f0      	LDI  R31,HIGH(0)
000997 c05f      	RJMP _0x2120007
                 _0x202000B:
000998 940e 0e8f 	CALL SUBOPT_0x36
00099a 820f      	STD  Y+7,R0
00099b 940e 0e8f 	CALL SUBOPT_0x36
00099d 820e      	STD  Y+6,R0
00099e 940e 0e8f 	CALL SUBOPT_0x36
0009a0 8608      	STD  Y+8,R0
0009a1 85eb      	LDD  R30,Y+11
0009a2 85a8      	LDD  R26,Y+8
0009a3 17ea      	CP   R30,R26
0009a4 f418      	BRSH _0x202000C
0009a5 e0e0      	LDI  R30,LOW(0)
0009a6 e0f0      	LDI  R31,HIGH(0)
0009a7 c04f      	RJMP _0x2120007
                 _0x202000C:
0009a8 01f8      	MOVW R30,R16
                +
0009a9 5f0f     +SUBI R16 , LOW ( - 1 )
0009aa 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0009ab 9154      	LPM  R21,Z
0009ac 85a8      	LDD  R26,Y+8
0009ad 27bb      	CLR  R27
0009ae 27ee      	CLR  R30
0009af 0fa5      	ADD  R26,R21
0009b0 1fbe      	ADC  R27,R30
0009b1 85eb      	LDD  R30,Y+11
0009b2 e0f0      	LDI  R31,0
0009b3 17ea      	CP   R30,R26
0009b4 07fb      	CPC  R31,R27
0009b5 f018      	BRLO _0x202000D
0009b6 e0e0      	LDI  R30,LOW(0)
0009b7 e0f0      	LDI  R31,HIGH(0)
0009b8 c03e      	RJMP _0x2120007
                 _0x202000D:
0009b9 81ee      	LDD  R30,Y+6
0009ba 95e6      	LSR  R30
0009bb 95e6      	LSR  R30
0009bc 95e6      	LSR  R30
0009bd 2f4e      	MOV  R20,R30
0009be 81ee      	LDD  R30,Y+6
0009bf 70e7      	ANDI R30,LOW(0x7)
0009c0 f009      	BREQ _0x202000E
0009c1 5f4f      	SUBI R20,-LOW(1)
                 _0x202000E:
0009c2 81ef      	LDD  R30,Y+7
0009c3 30e0      	CPI  R30,0
0009c4 f0a1      	BREQ _0x202000F
0009c5 85a9      	LDD  R26,Y+9
0009c6 85ba      	LDD  R27,Y+9+1
0009c7 93ec      	ST   X,R30
0009c8 85a8      	LDD  R26,Y+8
0009c9 85eb      	LDD  R30,Y+11
0009ca 1bea      	SUB  R30,R26
0009cb e0f0      	LDI  R31,0
0009cc 01df      	MOVW R26,R30
0009cd 81ef      	LDD  R30,Y+7
0009ce e0f0      	LDI  R31,0
0009cf 940e 0efd 	CALL __MULW12U
0009d1 01df      	MOVW R26,R30
0009d2 2fe4      	MOV  R30,R20
0009d3 e0f0      	LDI  R31,0
0009d4 940e 0efd 	CALL __MULW12U
0009d6 0fe0      	ADD  R30,R16
0009d7 1ff1      	ADC  R31,R17
0009d8 c01e      	RJMP _0x2120007
                 _0x202000F:
0009d9 0198      	MOVW R18,R16
0009da 2fe5      	MOV  R30,R21
0009db e0f0      	LDI  R31,0
                +
0009dc 0f0e     +ADD R16 , R30
0009dd 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
                 _0x2020010:
0009de 85a8      	LDD  R26,Y+8
0009df 5faf      	SUBI R26,-LOW(1)
0009e0 87a8      	STD  Y+8,R26
0009e1 50a1      	SUBI R26,LOW(1)
0009e2 85eb      	LDD  R30,Y+11
0009e3 17ae      	CP   R26,R30
0009e4 f460      	BRSH _0x2020012
0009e5 01f9      	MOVW R30,R18
                +
0009e6 5f2f     +SUBI R18 , LOW ( - 1 )
0009e7 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0009e8 91a4      	LPM  R26,Z
0009e9 e0b0      	LDI  R27,0
0009ea 2fe4      	MOV  R30,R20
0009eb e0f0      	LDI  R31,0
0009ec 940e 0efd 	CALL __MULW12U
                +
0009ee 0f0e     +ADD R16 , R30
0009ef 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
0009f0 cfed      	RJMP _0x2020010
                 _0x2020012:
0009f1 01f9      	MOVW R30,R18
0009f2 91e4      	LPM  R30,Z
0009f3 85a9      	LDD  R26,Y+9
0009f4 85ba      	LDD  R27,Y+9+1
0009f5 93ec      	ST   X,R30
0009f6 01f8      	MOVW R30,R16
                 _0x2120007:
0009f7 940e 0f66 	CALL __LOADLOCR6
0009f9 962c      	ADIW R28,12
0009fa 9508      	RET
                 ; .FEND
                 _glcd_new_line_G101:
                 ; .FSTART _glcd_new_line_G101
0009fb e0e0      	LDI  R30,LOW(0)
                +
0009fc 93e0 0163+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
                +
0009fe 91a0 0164+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
000a00 27bb      	CLR  R27
000a01 940e 0e94 	CALL SUBOPT_0x37
000a03 e0f0      	LDI  R31,0
000a04 0fae      	ADD  R26,R30
000a05 1fbf      	ADC  R27,R31
                +
000a06 91e0 0168+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
000a08 e0f0      	LDI  R31,0
000a09 0fae      	ADD  R26,R30
000a0a 1fbf      	ADC  R27,R31
000a0b df6b      	RCALL _glcd_clipy
                +
000a0c 93e0 0164+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000a0e 9508      	RET
                 ; .FEND
                 _glcd_putchar:
                 ; .FSTART _glcd_putchar
000a0f 93aa      	ST   -Y,R26
000a10 9721      	SBIW R28,1
000a11 940e 0e88 	CALL SUBOPT_0x35
000a13 9730      	SBIW R30,0
000a14 f409      	BRNE PC+2
000a15 c05f      	RJMP _0x202001F
000a16 81af      	LDD  R26,Y+7
000a17 30aa      	CPI  R26,LOW(0xA)
000a18 f409      	BRNE _0x2020020
000a19 c059      	RJMP _0x2020021
                 _0x2020020:
000a1a 81ef      	LDD  R30,Y+7
000a1b 93ea      	ST   -Y,R30
000a1c 01de      	MOVW R26,R28
000a1d 9617      	ADIW R26,7
000a1e df6d      	RCALL _glcd_getcharw_G101
000a1f 01af      	MOVW R20,R30
000a20 9730      	SBIW R30,0
000a21 f409      	BRNE _0x2020022
000a22 c054      	RJMP _0x2120006
                 _0x2020022:
                +
000a23 91e0 0167+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
000a25 81ae      	LDD  R26,Y+6
000a26 0fea      	ADD  R30,R26
000a27 2f3e      	MOV  R19,R30
                +
000a28 91a0 0163+LDS R26 , _glcd_state + ( 2 )
                 	__GETB2MN _glcd_state,2
000a2a 27bb      	CLR  R27
000a2b e0f0      	LDI  R31,0
000a2c 0fea      	ADD  R30,R26
000a2d 1ffb      	ADC  R31,R27
000a2e 018f      	MOVW R16,R30
                +
000a2f 3801     +CPI R16 , LOW ( 129 )
000a30 e0e0     +LDI R30 , HIGH ( 129 )
000a31 071e     +CPC R17 , R30
                 	__CPWRN 16,17,129
000a32 f018      	BRLO _0x2020023
000a33 2f03      	MOV  R16,R19
000a34 2711      	CLR  R17
000a35 dfc5      	RCALL _glcd_new_line_G101
                 _0x2020023:
                +
000a36 91e0 0163+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
000a38 93ea      	ST   -Y,R30
                +
000a39 91e0 0164+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
000a3b 93ea      	ST   -Y,R30
000a3c 85e8      	LDD  R30,Y+8
000a3d 93ea      	ST   -Y,R30
000a3e 940e 0e94 	CALL SUBOPT_0x37
000a40 93ea      	ST   -Y,R30
000a41 e0e1      	LDI  R30,LOW(1)
000a42 93ea      	ST   -Y,R30
000a43 935a      	ST   -Y,R21
000a44 934a      	ST   -Y,R20
000a45 e0a7      	LDI  R26,LOW(7)
000a46 dd3e      	RCALL _glcd_block
                +
000a47 91e0 0163+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
000a49 81ae      	LDD  R26,Y+6
000a4a 0fea      	ADD  R30,R26
000a4b 93ea      	ST   -Y,R30
                +
000a4c 91e0 0164+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
000a4e 93ea      	ST   -Y,R30
                +
000a4f 91e0 0167+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
000a51 93ea      	ST   -Y,R30
000a52 940e 0e94 	CALL SUBOPT_0x37
000a54 93ea      	ST   -Y,R30
000a55 e0e0      	LDI  R30,LOW(0)
000a56 93ea      	ST   -Y,R30
000a57 940e 0d79 	CALL SUBOPT_0x11
000a59 e0a9      	LDI  R26,LOW(9)
000a5a dd2a      	RCALL _glcd_block
                +
000a5b 91e0 0163+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
000a5d 93ea      	ST   -Y,R30
                +
000a5e 91a0 0164+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
000a60 940e 0e94 	CALL SUBOPT_0x37
000a62 0fea      	ADD  R30,R26
000a63 93ea      	ST   -Y,R30
000a64 933a      	ST   -Y,R19
                +
000a65 91e0 0168+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
000a67 93ea      	ST   -Y,R30
000a68 e0e0      	LDI  R30,LOW(0)
000a69 93ea      	ST   -Y,R30
000a6a 940e 0d79 	CALL SUBOPT_0x11
000a6c e0a9      	LDI  R26,LOW(9)
000a6d dd17      	RCALL _glcd_block
000a6e e8e0      	LDI  R30,LOW(128)
000a6f e0f0      	LDI  R31,HIGH(128)
000a70 17e0      	CP   R30,R16
000a71 07f1      	CPC  R31,R17
000a72 f411      	BRNE _0x2020024
                 _0x2020021:
000a73 df87      	RCALL _glcd_new_line_G101
000a74 c002      	RJMP _0x2120006
                 _0x2020024:
                 _0x202001F:
                +
000a75 9300 0163+STS _glcd_state + ( 2 ) , R16
                 	__PUTBMRN _glcd_state,2,16
                 _0x2120006:
000a77 940e 0f66 	CALL __LOADLOCR6
000a79 9628      	ADIW R28,8
000a7a 9508      	RET
                 ; .FEND
                 _glcd_outtextxyf:
                 ; .FSTART _glcd_outtextxyf
000a7b 93ba      	ST   -Y,R27
000a7c 93aa      	ST   -Y,R26
000a7d 931a      	ST   -Y,R17
000a7e 81ec      	LDD  R30,Y+4
000a7f 93ea      	ST   -Y,R30
000a80 81ac      	LDD  R26,Y+4
000a81 d021      	RCALL _glcd_moveto
                 _0x2020028:
000a82 81e9      	LDD  R30,Y+1
000a83 81fa      	LDD  R31,Y+1+1
000a84 9631      	ADIW R30,1
000a85 83e9      	STD  Y+1,R30
000a86 83fa      	STD  Y+1+1,R31
000a87 9731      	SBIW R30,1
000a88 91e4      	LPM  R30,Z
000a89 2f1e      	MOV  R17,R30
000a8a 30e0      	CPI  R30,0
000a8b f019      	BREQ _0x202002A
000a8c 2fa1      	MOV  R26,R17
000a8d df81      	RCALL _glcd_putchar
000a8e cff3      	RJMP _0x2020028
                 _0x202002A:
000a8f 8118      	LDD  R17,Y+0
000a90 940c 0c61 	JMP  _0x2120004
                 ; .FEND
                 _glcd_outtext:
                 ; .FSTART _glcd_outtext
000a92 93ba      	ST   -Y,R27
000a93 93aa      	ST   -Y,R26
000a94 931a      	ST   -Y,R17
                 _0x202002E:
000a95 81a9      	LDD  R26,Y+1
000a96 81ba      	LDD  R27,Y+1+1
000a97 91ed      	LD   R30,X+
000a98 83a9      	STD  Y+1,R26
000a99 83ba      	STD  Y+1+1,R27
000a9a 2f1e      	MOV  R17,R30
000a9b 30e0      	CPI  R30,0
000a9c f019      	BREQ _0x2020030
000a9d 2fa1      	MOV  R26,R17
000a9e df70      	RCALL _glcd_putchar
000a9f cff5      	RJMP _0x202002E
                 _0x2020030:
000aa0 8118      	LDD  R17,Y+0
000aa1 940c 0cd9 	JMP  _0x2120002
                 ; .FEND
                 _glcd_moveto:
                 ; .FSTART _glcd_moveto
000aa3 93aa      	ST   -Y,R26
000aa4 81a9      	LDD  R26,Y+1
000aa5 27bb      	CLR  R27
000aa6 debb      	RCALL _glcd_clipx
                +
000aa7 93e0 0163+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
000aa9 81a8      	LD   R26,Y
000aaa 27bb      	CLR  R27
000aab decb      	RCALL _glcd_clipy
                +
000aac 93e0 0164+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000aae 940c 0c92 	JMP  _0x2120003
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G103:
                 ; .FSTART _put_buff_G103
000ab0 93ba      	ST   -Y,R27
000ab1 93aa      	ST   -Y,R26
000ab2 931a      	ST   -Y,R17
000ab3 930a      	ST   -Y,R16
000ab4 81aa      	LDD  R26,Y+2
000ab5 81bb      	LDD  R27,Y+2+1
000ab6 9612      	ADIW R26,2
000ab7 940e 0f31 	CALL __GETW1P
000ab9 9730      	SBIW R30,0
000aba f159      	BREQ _0x2060010
000abb 81aa      	LDD  R26,Y+2
000abc 81bb      	LDD  R27,Y+2+1
000abd 9614      	ADIW R26,4
000abe 940e 0f31 	CALL __GETW1P
000ac0 018f      	MOVW R16,R30
000ac1 9730      	SBIW R30,0
000ac2 f061      	BREQ _0x2060012
                +
000ac3 3002     +CPI R16 , LOW ( 2 )
000ac4 e0e0     +LDI R30 , HIGH ( 2 )
000ac5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000ac6 f098      	BRLO _0x2060013
000ac7 01f8      	MOVW R30,R16
000ac8 9731      	SBIW R30,1
000ac9 018f      	MOVW R16,R30
                +
000aca 81aa     +LDD R26 , Y + 2
000acb 81bb     +LDD R27 , Y + 2 + 1
000acc 9614     +ADIW R26 , 4
000acd 93ed     +ST X + , R30
000ace 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2060012:
000acf 81aa      	LDD  R26,Y+2
000ad0 81bb      	LDD  R27,Y+2+1
000ad1 9612      	ADIW R26,2
000ad2 91ed      	LD   R30,X+
000ad3 91fd      	LD   R31,X+
000ad4 9631      	ADIW R30,1
000ad5 93fe      	ST   -X,R31
000ad6 93ee      	ST   -X,R30
000ad7 9731      	SBIW R30,1
000ad8 81ac      	LDD  R26,Y+4
000ad9 83a0      	STD  Z+0,R26
                 _0x2060013:
000ada 81aa      	LDD  R26,Y+2
000adb 81bb      	LDD  R27,Y+2+1
000adc 940e 0f31 	CALL __GETW1P
000ade 23ff      	TST  R31
000adf f02a      	BRMI _0x2060014
000ae0 91ed      	LD   R30,X+
000ae1 91fd      	LD   R31,X+
000ae2 9631      	ADIW R30,1
000ae3 93fe      	ST   -X,R31
000ae4 93ee      	ST   -X,R30
                 _0x2060014:
000ae5 c004      	RJMP _0x2060015
                 _0x2060010:
000ae6 81aa      	LDD  R26,Y+2
000ae7 81bb      	LDD  R27,Y+2+1
000ae8 940e 0d74 	CALL SUBOPT_0x10
                 _0x2060015:
000aea 8119      	LDD  R17,Y+1
000aeb 8108      	LDD  R16,Y+0
000aec c174      	RJMP _0x2120004
                 ; .FEND
                 __print_G103:
                 ; .FSTART __print_G103
000aed 93ba      	ST   -Y,R27
000aee 93aa      	ST   -Y,R26
000aef 9726      	SBIW R28,6
000af0 940e 0f5f 	CALL __SAVELOCR6
000af2 e010      	LDI  R17,0
000af3 85ac      	LDD  R26,Y+12
000af4 85bd      	LDD  R27,Y+12+1
000af5 940e 0d6f 	CALL SUBOPT_0xF
                 _0x2060016:
000af7 89ea      	LDD  R30,Y+18
000af8 89fb      	LDD  R31,Y+18+1
000af9 9631      	ADIW R30,1
000afa 8bea      	STD  Y+18,R30
000afb 8bfb      	STD  Y+18+1,R31
000afc 9731      	SBIW R30,1
000afd 91e4      	LPM  R30,Z
000afe 2f2e      	MOV  R18,R30
000aff 30e0      	CPI  R30,0
000b00 f409      	BRNE PC+2
000b01 c115      	RJMP _0x2060018
000b02 2fe1      	MOV  R30,R17
000b03 30e0      	CPI  R30,0
000b04 f439      	BRNE _0x206001C
000b05 3225      	CPI  R18,37
000b06 f411      	BRNE _0x206001D
000b07 e011      	LDI  R17,LOW(1)
000b08 c002      	RJMP _0x206001E
                 _0x206001D:
000b09 940e 0e9b 	CALL SUBOPT_0x38
                 _0x206001E:
000b0b c10a      	RJMP _0x206001B
                 _0x206001C:
000b0c 30e1      	CPI  R30,LOW(0x1)
000b0d f4a9      	BRNE _0x206001F
000b0e 3225      	CPI  R18,37
000b0f f419      	BRNE _0x2060020
000b10 940e 0e9b 	CALL SUBOPT_0x38
000b12 c102      	RJMP _0x20600CC
                 _0x2060020:
000b13 e012      	LDI  R17,LOW(2)
000b14 e040      	LDI  R20,LOW(0)
000b15 e000      	LDI  R16,LOW(0)
000b16 322d      	CPI  R18,45
000b17 f411      	BRNE _0x2060021
000b18 e001      	LDI  R16,LOW(1)
000b19 c0fc      	RJMP _0x206001B
                 _0x2060021:
000b1a 322b      	CPI  R18,43
000b1b f411      	BRNE _0x2060022
000b1c e24b      	LDI  R20,LOW(43)
000b1d c0f8      	RJMP _0x206001B
                 _0x2060022:
000b1e 3220      	CPI  R18,32
000b1f f411      	BRNE _0x2060023
000b20 e240      	LDI  R20,LOW(32)
000b21 c0f4      	RJMP _0x206001B
                 _0x2060023:
000b22 c002      	RJMP _0x2060024
                 _0x206001F:
000b23 30e2      	CPI  R30,LOW(0x2)
000b24 f439      	BRNE _0x2060025
                 _0x2060024:
000b25 e050      	LDI  R21,LOW(0)
000b26 e013      	LDI  R17,LOW(3)
000b27 3320      	CPI  R18,48
000b28 f411      	BRNE _0x2060026
000b29 6800      	ORI  R16,LOW(128)
000b2a c0eb      	RJMP _0x206001B
                 _0x2060026:
000b2b c003      	RJMP _0x2060027
                 _0x2060025:
000b2c 30e3      	CPI  R30,LOW(0x3)
000b2d f009      	BREQ PC+2
000b2e c0e7      	RJMP _0x206001B
                 _0x2060027:
000b2f 3320      	CPI  R18,48
000b30 f010      	BRLO _0x206002A
000b31 332a      	CPI  R18,58
000b32 f008      	BRLO _0x206002B
                 _0x206002A:
000b33 c007      	RJMP _0x2060029
                 _0x206002B:
000b34 e0aa      	LDI  R26,LOW(10)
000b35 9f5a      	MUL  R21,R26
000b36 2d50      	MOV  R21,R0
000b37 2fe2      	MOV  R30,R18
000b38 53e0      	SUBI R30,LOW(48)
000b39 0f5e      	ADD  R21,R30
000b3a c0db      	RJMP _0x206001B
                 _0x2060029:
000b3b 2fe2      	MOV  R30,R18
000b3c 36e3      	CPI  R30,LOW(0x63)
000b3d f449      	BRNE _0x206002F
000b3e 940e 0ea2 	CALL SUBOPT_0x39
000b40 89e8      	LDD  R30,Y+16
000b41 89f9      	LDD  R31,Y+16+1
000b42 81a4      	LDD  R26,Z+4
000b43 93aa      	ST   -Y,R26
000b44 940e 0ea8 	CALL SUBOPT_0x3A
000b46 c0ce      	RJMP _0x2060030
                 _0x206002F:
000b47 37e3      	CPI  R30,LOW(0x73)
000b48 f441      	BRNE _0x2060032
000b49 940e 0ea2 	CALL SUBOPT_0x39
000b4b 940e 0eae 	CALL SUBOPT_0x3B
000b4d 940e 0c70 	CALL _strlen
000b4f 2f1e      	MOV  R17,R30
000b50 c00a      	RJMP _0x2060033
                 _0x2060032:
000b51 37e0      	CPI  R30,LOW(0x70)
000b52 f461      	BRNE _0x2060035
000b53 940e 0ea2 	CALL SUBOPT_0x39
000b55 940e 0eae 	CALL SUBOPT_0x3B
000b57 940e 0c7c 	CALL _strlenf
000b59 2f1e      	MOV  R17,R30
000b5a 6008      	ORI  R16,LOW(8)
                 _0x2060033:
000b5b 6002      	ORI  R16,LOW(2)
000b5c 770f      	ANDI R16,LOW(127)
000b5d e030      	LDI  R19,LOW(0)
000b5e c034      	RJMP _0x2060036
                 _0x2060035:
000b5f 36e4      	CPI  R30,LOW(0x64)
000b60 f011      	BREQ _0x2060039
000b61 36e9      	CPI  R30,LOW(0x69)
000b62 f411      	BRNE _0x206003A
                 _0x2060039:
000b63 6004      	ORI  R16,LOW(4)
000b64 c002      	RJMP _0x206003B
                 _0x206003A:
000b65 37e5      	CPI  R30,LOW(0x75)
000b66 f431      	BRNE _0x206003C
                 _0x206003B:
000b67 e4e2      	LDI  R30,LOW(_tbl10_G103*2)
000b68 e0f2      	LDI  R31,HIGH(_tbl10_G103*2)
000b69 83ee      	STD  Y+6,R30
000b6a 83ff      	STD  Y+6+1,R31
000b6b e015      	LDI  R17,LOW(5)
000b6c c00c      	RJMP _0x206003D
                 _0x206003C:
000b6d 35e8      	CPI  R30,LOW(0x58)
000b6e f411      	BRNE _0x206003F
000b6f 6008      	ORI  R16,LOW(8)
000b70 c003      	RJMP _0x2060040
                 _0x206003F:
000b71 37e8      	CPI  R30,LOW(0x78)
000b72 f009      	BREQ PC+2
000b73 c0a1      	RJMP _0x2060071
                 _0x2060040:
000b74 e4ec      	LDI  R30,LOW(_tbl16_G103*2)
000b75 e0f2      	LDI  R31,HIGH(_tbl16_G103*2)
000b76 83ee      	STD  Y+6,R30
000b77 83ff      	STD  Y+6+1,R31
000b78 e014      	LDI  R17,LOW(4)
                 _0x206003D:
000b79 ff02      	SBRS R16,2
000b7a c014      	RJMP _0x2060042
000b7b 940e 0ea2 	CALL SUBOPT_0x39
000b7d 940e 0eb8 	CALL SUBOPT_0x3C
000b7f 85ab      	LDD  R26,Y+11
000b80 23aa      	TST  R26
000b81 f43a      	BRPL _0x2060043
000b82 85ea      	LDD  R30,Y+10
000b83 85fb      	LDD  R31,Y+10+1
000b84 940e 0ed5 	CALL __ANEGW1
000b86 87ea      	STD  Y+10,R30
000b87 87fb      	STD  Y+10+1,R31
000b88 e24d      	LDI  R20,LOW(45)
                 _0x2060043:
000b89 3040      	CPI  R20,0
000b8a f011      	BREQ _0x2060044
000b8b 5f1f      	SUBI R17,-LOW(1)
000b8c c001      	RJMP _0x2060045
                 _0x2060044:
000b8d 7f0b      	ANDI R16,LOW(251)
                 _0x2060045:
000b8e c004      	RJMP _0x2060046
                 _0x2060042:
000b8f 940e 0ea2 	CALL SUBOPT_0x39
000b91 940e 0eb8 	CALL SUBOPT_0x3C
                 _0x2060046:
                 _0x2060036:
000b93 fd00      	SBRC R16,0
000b94 c011      	RJMP _0x2060047
                 _0x2060048:
000b95 1715      	CP   R17,R21
000b96 f478      	BRSH _0x206004A
000b97 ff07      	SBRS R16,7
000b98 c008      	RJMP _0x206004B
000b99 ff02      	SBRS R16,2
000b9a c004      	RJMP _0x206004C
000b9b 7f0b      	ANDI R16,LOW(251)
000b9c 2f24      	MOV  R18,R20
000b9d 5011      	SUBI R17,LOW(1)
000b9e c001      	RJMP _0x206004D
                 _0x206004C:
000b9f e320      	LDI  R18,LOW(48)
                 _0x206004D:
000ba0 c001      	RJMP _0x206004E
                 _0x206004B:
000ba1 e220      	LDI  R18,LOW(32)
                 _0x206004E:
000ba2 940e 0e9b 	CALL SUBOPT_0x38
000ba4 5051      	SUBI R21,LOW(1)
000ba5 cfef      	RJMP _0x2060048
                 _0x206004A:
                 _0x2060047:
000ba6 2f31      	MOV  R19,R17
000ba7 ff01      	SBRS R16,1
000ba8 c017      	RJMP _0x206004F
                 _0x2060050:
000ba9 3030      	CPI  R19,0
000baa f0a1      	BREQ _0x2060052
000bab ff03      	SBRS R16,3
000bac c006      	RJMP _0x2060053
000bad 81ee      	LDD  R30,Y+6
000bae 81ff      	LDD  R31,Y+6+1
000baf 9125      	LPM  R18,Z+
000bb0 83ee      	STD  Y+6,R30
000bb1 83ff      	STD  Y+6+1,R31
000bb2 c005      	RJMP _0x2060054
                 _0x2060053:
000bb3 81ae      	LDD  R26,Y+6
000bb4 81bf      	LDD  R27,Y+6+1
000bb5 912d      	LD   R18,X+
000bb6 83ae      	STD  Y+6,R26
000bb7 83bf      	STD  Y+6+1,R27
                 _0x2060054:
000bb8 940e 0e9b 	CALL SUBOPT_0x38
000bba 3050      	CPI  R21,0
000bbb f009      	BREQ _0x2060055
000bbc 5051      	SUBI R21,LOW(1)
                 _0x2060055:
000bbd 5031      	SUBI R19,LOW(1)
000bbe cfea      	RJMP _0x2060050
                 _0x2060052:
000bbf c04b      	RJMP _0x2060056
                 _0x206004F:
                 _0x2060058:
000bc0 e320      	LDI  R18,LOW(48)
000bc1 81ee      	LDD  R30,Y+6
000bc2 81ff      	LDD  R31,Y+6+1
000bc3 940e 0f35 	CALL __GETW1PF
000bc5 87e8      	STD  Y+8,R30
000bc6 87f9      	STD  Y+8+1,R31
000bc7 81ee      	LDD  R30,Y+6
000bc8 81ff      	LDD  R31,Y+6+1
000bc9 9632      	ADIW R30,2
000bca 83ee      	STD  Y+6,R30
000bcb 83ff      	STD  Y+6+1,R31
                 _0x206005A:
000bcc 85e8      	LDD  R30,Y+8
000bcd 85f9      	LDD  R31,Y+8+1
000bce 85aa      	LDD  R26,Y+10
000bcf 85bb      	LDD  R27,Y+10+1
000bd0 17ae      	CP   R26,R30
000bd1 07bf      	CPC  R27,R31
000bd2 f050      	BRLO _0x206005C
000bd3 5f2f      	SUBI R18,-LOW(1)
000bd4 85a8      	LDD  R26,Y+8
000bd5 85b9      	LDD  R27,Y+8+1
000bd6 85ea      	LDD  R30,Y+10
000bd7 85fb      	LDD  R31,Y+10+1
000bd8 1bea      	SUB  R30,R26
000bd9 0bfb      	SBC  R31,R27
000bda 87ea      	STD  Y+10,R30
000bdb 87fb      	STD  Y+10+1,R31
000bdc cfef      	RJMP _0x206005A
                 _0x206005C:
000bdd 332a      	CPI  R18,58
000bde f028      	BRLO _0x206005D
000bdf ff03      	SBRS R16,3
000be0 c002      	RJMP _0x206005E
000be1 5f29      	SUBI R18,-LOW(7)
000be2 c001      	RJMP _0x206005F
                 _0x206005E:
000be3 5d29      	SUBI R18,-LOW(39)
                 _0x206005F:
                 _0x206005D:
000be4 fd04      	SBRC R16,4
000be5 c01a      	RJMP _0x2060061
000be6 3321      	CPI  R18,49
000be7 f420      	BRSH _0x2060063
000be8 85a8      	LDD  R26,Y+8
000be9 85b9      	LDD  R27,Y+8+1
000bea 9711      	SBIW R26,1
000beb f409      	BRNE _0x2060062
                 _0x2060063:
000bec c009      	RJMP _0x20600CD
                 _0x2060062:
000bed 1753      	CP   R21,R19
000bee f010      	BRLO _0x2060067
000bef ff00      	SBRS R16,0
000bf0 c001      	RJMP _0x2060068
                 _0x2060067:
000bf1 c013      	RJMP _0x2060066
                 _0x2060068:
000bf2 e220      	LDI  R18,LOW(32)
000bf3 ff07      	SBRS R16,7
000bf4 c00b      	RJMP _0x2060069
000bf5 e320      	LDI  R18,LOW(48)
                 _0x20600CD:
000bf6 6100      	ORI  R16,LOW(16)
000bf7 ff02      	SBRS R16,2
000bf8 c007      	RJMP _0x206006A
000bf9 7f0b      	ANDI R16,LOW(251)
000bfa 934a      	ST   -Y,R20
000bfb 940e 0ea8 	CALL SUBOPT_0x3A
000bfd 3050      	CPI  R21,0
000bfe f009      	BREQ _0x206006B
000bff 5051      	SUBI R21,LOW(1)
                 _0x206006B:
                 _0x206006A:
                 _0x2060069:
                 _0x2060061:
000c00 940e 0e9b 	CALL SUBOPT_0x38
000c02 3050      	CPI  R21,0
000c03 f009      	BREQ _0x206006C
000c04 5051      	SUBI R21,LOW(1)
                 _0x206006C:
                 _0x2060066:
000c05 5031      	SUBI R19,LOW(1)
000c06 85a8      	LDD  R26,Y+8
000c07 85b9      	LDD  R27,Y+8+1
000c08 9712      	SBIW R26,2
000c09 f008      	BRLO _0x2060059
000c0a cfb5      	RJMP _0x2060058
                 _0x2060059:
                 _0x2060056:
000c0b ff00      	SBRS R16,0
000c0c c008      	RJMP _0x206006D
                 _0x206006E:
000c0d 3050      	CPI  R21,0
000c0e f031      	BREQ _0x2060070
000c0f 5051      	SUBI R21,LOW(1)
000c10 e2e0      	LDI  R30,LOW(32)
000c11 93ea      	ST   -Y,R30
000c12 940e 0ea8 	CALL SUBOPT_0x3A
000c14 cff8      	RJMP _0x206006E
                 _0x2060070:
                 _0x206006D:
                 _0x2060071:
                 _0x2060030:
                 _0x20600CC:
000c15 e010      	LDI  R17,LOW(0)
                 _0x206001B:
000c16 cee0      	RJMP _0x2060016
                 _0x2060018:
000c17 85ac      	LDD  R26,Y+12
000c18 85bd      	LDD  R27,Y+12+1
000c19 940e 0f31 	CALL __GETW1P
000c1b 940e 0f66 	CALL __LOADLOCR6
000c1d 9664      	ADIW R28,20
000c1e 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000c1f 92ff      	PUSH R15
000c20 2ef8      	MOV  R15,R24
000c21 9726      	SBIW R28,6
000c22 940e 0f61 	CALL __SAVELOCR4
000c24 940e 0ec0 	CALL SUBOPT_0x3D
000c26 9730      	SBIW R30,0
000c27 f419      	BRNE _0x2060072
000c28 efef      	LDI  R30,LOW(65535)
000c29 efff      	LDI  R31,HIGH(65535)
000c2a c023      	RJMP _0x2120005
                 _0x2060072:
000c2b 01de      	MOVW R26,R28
000c2c 9616      	ADIW R26,6
000c2d 940e 0ed1 	CALL __ADDW2R15
000c2f 018d      	MOVW R16,R26
000c30 940e 0ec0 	CALL SUBOPT_0x3D
000c32 83ee      	STD  Y+6,R30
000c33 83ff      	STD  Y+6+1,R31
000c34 e0e0      	LDI  R30,LOW(0)
000c35 87e8      	STD  Y+8,R30
000c36 87e9      	STD  Y+8+1,R30
000c37 01de      	MOVW R26,R28
000c38 961a      	ADIW R26,10
000c39 940e 0ed1 	CALL __ADDW2R15
000c3b 940e 0f31 	CALL __GETW1P
000c3d 93fa      	ST   -Y,R31
000c3e 93ea      	ST   -Y,R30
000c3f 931a      	ST   -Y,R17
000c40 930a      	ST   -Y,R16
000c41 ebe0      	LDI  R30,LOW(_put_buff_G103)
000c42 e0fa      	LDI  R31,HIGH(_put_buff_G103)
000c43 93fa      	ST   -Y,R31
000c44 93ea      	ST   -Y,R30
000c45 01de      	MOVW R26,R28
000c46 961a      	ADIW R26,10
000c47 dea5      	RCALL __print_G103
000c48 019f      	MOVW R18,R30
000c49 81ae      	LDD  R26,Y+6
000c4a 81bf      	LDD  R27,Y+6+1
000c4b e0e0      	LDI  R30,LOW(0)
000c4c 93ec      	ST   X,R30
000c4d 01f9      	MOVW R30,R18
                 _0x2120005:
000c4e 940e 0f68 	CALL __LOADLOCR4
000c50 962a      	ADIW R28,10
000c51 90ff      	POP  R15
000c52 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000c53 93ba      	ST   -Y,R27
000c54 93aa      	ST   -Y,R26
000c55 81b9          ldd  r27,y+1
000c56 81a8          ld   r26,y
000c57 9610          adiw r26,0
000c58 f031          breq memset1
000c59 81fc          ldd  r31,y+4
000c5a 81eb          ldd  r30,y+3
000c5b 816a          ldd  r22,y+2
                 memset0:
000c5c 9361          st   z+,r22
000c5d 9711          sbiw r26,1
000c5e f7e9          brne memset0
                 memset1:
000c5f 81eb          ldd  r30,y+3
000c60 81fc          ldd  r31,y+4
                 _0x2120004:
000c61 9625      	ADIW R28,5
000c62 9508      	RET
                 ; .FEND
                 _strcpy:
                 ; .FSTART _strcpy
000c63 93ba      	ST   -Y,R27
000c64 93aa      	ST   -Y,R26
000c65 91e9          ld   r30,y+
000c66 91f9          ld   r31,y+
000c67 91a9          ld   r26,y+
000c68 91b9          ld   r27,y+
000c69 01cd          movw r24,r26
                 strcpy0:
000c6a 9161          ld   r22,z+
000c6b 936d          st   x+,r22
000c6c 2366          tst  r22
000c6d f7e1          brne strcpy0
000c6e 01fc          movw r30,r24
000c6f 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000c70 93ba      	ST   -Y,R27
000c71 93aa      	ST   -Y,R26
000c72 91a9          ld   r26,y+
000c73 91b9          ld   r27,y+
000c74 27ee          clr  r30
000c75 27ff          clr  r31
                 strlen0:
000c76 916d          ld   r22,x+
000c77 2366          tst  r22
000c78 f011          breq strlen1
000c79 9631          adiw r30,1
000c7a cffb          rjmp strlen0
                 strlen1:
000c7b 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000c7c 93ba      	ST   -Y,R27
000c7d 93aa      	ST   -Y,R26
000c7e 27aa          clr  r26
000c7f 27bb          clr  r27
000c80 91e9          ld   r30,y+
000c81 91f9          ld   r31,y+
                 strlenf0:
000c82 9005      	lpm  r0,z+
000c83 2000          tst  r0
000c84 f011          breq strlenf1
000c85 9611          adiw r26,1
000c86 cffb          rjmp strlenf0
                 strlenf1:
000c87 01fd          movw r30,r26
000c88 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _glcd_getmask:
                 ; .FSTART _glcd_getmask
000c89 93aa      	ST   -Y,R26
000c8a 81e8      	LD   R30,Y
000c8b e0f0      	LDI  R31,0
000c8c 5ce8      	SUBI R30,LOW(-__glcd_mask*2)
000c8d 4ffd      	SBCI R31,HIGH(-__glcd_mask*2)
000c8e 91a4      	LPM  R26,Z
000c8f 81e9      	LDD  R30,Y+1
000c90 940e 0ed9 	CALL __LSLB12
                 _0x2120003:
000c92 9622      	ADIW R28,2
000c93 9508      	RET
                 ; .FEND
                 _glcd_mappixcolor1bit:
                 ; .FSTART _glcd_mappixcolor1bit
000c94 93aa      	ST   -Y,R26
000c95 931a      	ST   -Y,R17
000c96 81e9      	LDD  R30,Y+1
000c97 30e7      	CPI  R30,LOW(0x7)
000c98 f011      	BREQ _0x20A0007
000c99 30ea      	CPI  R30,LOW(0xA)
000c9a f419      	BRNE _0x20A0008
                 _0x20A0007:
000c9b 9110 0161 	LDS  R17,_glcd_state
000c9d c009      	RJMP _0x20A0009
                 _0x20A0008:
000c9e 30e9      	CPI  R30,LOW(0x9)
000c9f f419      	BRNE _0x20A000B
                +
000ca0 9110 0162+LDS R17 , _glcd_state + ( 1 )
                 	__GETBRMN 17,_glcd_state,1
000ca2 c004      	RJMP _0x20A0009
                 _0x20A000B:
000ca3 30e8      	CPI  R30,LOW(0x8)
000ca4 f4a1      	BRNE _0x20A0005
                +
000ca5 9110 0171+LDS R17 , _glcd_state + ( 16 )
                 	__GETBRMN 17,_glcd_state,16
                 _0x20A0009:
                +
000ca7 91e0 0162+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
000ca9 30e0      	CPI  R30,0
000caa f049      	BREQ _0x20A000E
000cab 3010      	CPI  R17,0
000cac f019      	BREQ _0x20A000F
000cad efef      	LDI  R30,LOW(255)
000cae 8118      	LDD  R17,Y+0
000caf c029      	RJMP _0x2120002
                 _0x20A000F:
000cb0 81ea      	LDD  R30,Y+2
000cb1 95e0      	COM  R30
000cb2 8118      	LDD  R17,Y+0
000cb3 c025      	RJMP _0x2120002
                 _0x20A000E:
000cb4 3010      	CPI  R17,0
000cb5 f419      	BRNE _0x20A0011
000cb6 e0e0      	LDI  R30,LOW(0)
000cb7 8118      	LDD  R17,Y+0
000cb8 c020      	RJMP _0x2120002
                 _0x20A0011:
                 _0x20A0005:
000cb9 81ea      	LDD  R30,Y+2
000cba 8118      	LDD  R17,Y+0
000cbb c01d      	RJMP _0x2120002
                 ; .FEND
                 _glcd_readmem:
                 ; .FSTART _glcd_readmem
000cbc 93ba      	ST   -Y,R27
000cbd 93aa      	ST   -Y,R26
000cbe 81ea      	LDD  R30,Y+2
000cbf 30e1      	CPI  R30,LOW(0x1)
000cc0 f421      	BRNE _0x20A0015
000cc1 81e8      	LD   R30,Y
000cc2 81f9      	LDD  R31,Y+1
000cc3 91e4      	LPM  R30,Z
000cc4 c014      	RJMP _0x2120002
                 _0x20A0015:
000cc5 30e2      	CPI  R30,LOW(0x2)
000cc6 f429      	BRNE _0x20A0016
000cc7 81a8      	LD   R26,Y
000cc8 81b9      	LDD  R27,Y+1
000cc9 940e 0f3e 	CALL __EEPROMRDB
000ccb c00d      	RJMP _0x2120002
                 _0x20A0016:
000ccc 30e3      	CPI  R30,LOW(0x3)
000ccd f441      	BRNE _0x20A0018
000cce 81a8      	LD   R26,Y
000ccf 81b9      	LDD  R27,Y+1
                +
000cd0 91e0 017a+LDS R30 , _glcd_state + ( 25 )
000cd2 91f0 017b+LDS R31 , _glcd_state + ( 25 ) + 1
000cd4 9509     +ICALL
                 	__CALL1MN _glcd_state,25
000cd5 c003      	RJMP _0x2120002
                 _0x20A0018:
000cd6 81a8      	LD   R26,Y
000cd7 81b9      	LDD  R27,Y+1
000cd8 91ec      	LD   R30,X
                 _0x2120002:
000cd9 9623      	ADIW R28,3
000cda 9508      	RET
                 ; .FEND
                 _glcd_writemem:
                 ; .FSTART _glcd_writemem
000cdb 93aa      	ST   -Y,R26
000cdc 81eb      	LDD  R30,Y+3
000cdd 30e0      	CPI  R30,0
000cde f429      	BRNE _0x20A001C
000cdf 81e8      	LD   R30,Y
000ce0 81a9      	LDD  R26,Y+1
000ce1 81ba      	LDD  R27,Y+1+1
000ce2 93ec      	ST   X,R30
000ce3 c014      	RJMP _0x20A001B
                 _0x20A001C:
000ce4 30e2      	CPI  R30,LOW(0x2)
000ce5 f431      	BRNE _0x20A001D
000ce6 81e8      	LD   R30,Y
000ce7 81a9      	LDD  R26,Y+1
000ce8 81ba      	LDD  R27,Y+1+1
000ce9 940e 0f4a 	CALL __EEPROMWRB
000ceb c00c      	RJMP _0x20A001B
                 _0x20A001D:
000cec 30e3      	CPI  R30,LOW(0x3)
000ced f451      	BRNE _0x20A001B
000cee 81e9      	LDD  R30,Y+1
000cef 81fa      	LDD  R31,Y+1+1
000cf0 93fa      	ST   -Y,R31
000cf1 93ea      	ST   -Y,R30
000cf2 81aa      	LDD  R26,Y+2
                +
000cf3 91e0 017c+LDS R30 , _glcd_state + ( 27 )
000cf5 91f0 017d+LDS R31 , _glcd_state + ( 27 ) + 1
000cf7 9509     +ICALL
                 	__CALL1MN _glcd_state,27
                 _0x20A001B:
                 _0x2120001:
000cf8 9624      	ADIW R28,4
000cf9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _glcd_state:
000161           	.BYTE 0x1D
                 _game:
00017e           	.BYTE 0x12
                 _win:
000190           	.BYTE 0x10
                 _state:
0001a0           	.BYTE 0x2
                 _r:
0001a2           	.BYTE 0x2
                 _c:
0001a4           	.BYTE 0x2
                 _k:
0001a6           	.BYTE 0x2
                 _row:
0001a8           	.BYTE 0x4
                 _txt:
0001ac           	.BYTE 0x2
                 _ks0108_coord_G100:
0001ae           	.BYTE 0x3
                 __seed_G108:
0001b1           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000cfa 93ba      	ST   -Y,R27
000cfb 93aa      	ST   -Y,R26
000cfc 81e8      	LD   R30,Y
000cfd 81f9      	LDD  R31,Y+1
000cfe 81aa      	LDD  R26,Y+2
000cff 81bb      	LDD  R27,Y+2+1
000d00 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000d01 940e 0f61 	CALL __SAVELOCR4
                +
000d03 e000     +LDI R16 , LOW ( 0 )
000d04 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000d05 e020     +LDI R18 , LOW ( 0 )
000d06 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000d07 e000     +LDI R16 , LOW ( 0 )
000d08 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000d09 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:57 WORDS
                 SUBOPT_0x2:
                +
000d0a e0a6     +LDI R26 , 6
000d0b 9fa0     +MUL R26 , R16
000d0c 01f0     +MOVW R30 , R0
000d0d 9fa1     +MUL R26 , R17
000d0e 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,6
000d0f 58e2      	SUBI R30,LOW(-_game)
000d10 4ffe      	SBCI R31,HIGH(-_game)
000d11 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x3:
000d12 01df      	MOVW R26,R30
000d13 01f9      	MOVW R30,R18
000d14 0fee      	LSL  R30
000d15 1fff      	ROL  R31
000d16 0fae      	ADD  R26,R30
000d17 1fbf      	ADC  R27,R31
000d18 940e 0f31 	CALL __GETW1P
000d1a 9730      	SBIW R30,0
000d1b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000d1c 8160      	LD   R22,Z
000d1d 8171      	LDD  R23,Z+1
                +
000d1e e0a6     +LDI R26 , 6
000d1f 9fa0     +MUL R26 , R16
000d20 01f0     +MOVW R30 , R0
000d21 9fa1     +MUL R26 , R17
000d22 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,6
000d23 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000d24 940e 0f31 	CALL __GETW1P
000d26 30e1      	CPI  R30,LOW(0x1)
000d27 e0a0      	LDI  R26,HIGH(0x1)
000d28 07fa      	CPC  R31,R26
000d29 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000d2a 940e 0f31 	CALL __GETW1P
000d2c 3fef      	CPI  R30,LOW(0xFFFF)
000d2d efaf      	LDI  R26,HIGH(0xFFFF)
000d2e 07fa      	CPC  R31,R26
000d2f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
000d30 01f9      	MOVW R30,R18
000d31 e7ae      	LDI  R26,LOW(_game)
000d32 e0b1      	LDI  R27,HIGH(_game)
000d33 0fee      	LSL  R30
000d34 1fff      	ROL  R31
000d35 0fae      	ADD  R26,R30
000d36 1fbf      	ADC  R27,R31
000d37 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
                +
000d38 e8a4     +LDI R26 , LOW ( _game + ( 6 ) )
000d39 e0b1     +LDI R27 , HIGH ( _game + ( 6 ) )
                 	__POINTW2MN _game,6
000d3a 01f9      	MOVW R30,R18
000d3b 0fee      	LSL  R30
000d3c 1fff      	ROL  R31
000d3d 0fae      	ADD  R26,R30
000d3e 1fbf      	ADC  R27,R31
000d3f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x9:
000d40 01f9      	MOVW R30,R18
000d41 0fee      	LSL  R30
000d42 1fff      	ROL  R31
000d43 0fae      	ADD  R26,R30
000d44 1fbf      	ADC  R27,R31
000d45 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
                +
000d46 91e0 0186+LDS R30 , _game + ( 8 )
000d48 91f0 0187+LDS R31 , _game + ( 8 ) + 1
                 	__GETW1MN _game,8
000d4a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000d4b 91a0 017e 	LDS  R26,_game
000d4d 91b0 017f 	LDS  R27,_game+1
000d4f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
                +
000d50 91e0 0182+LDS R30 , _game + ( 4 )
000d52 91f0 0183+LDS R31 , _game + ( 4 ) + 1
                 	__GETW1MN _game,4
000d54 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
000d55 940e 0f5f 	CALL __SAVELOCR6
                +
000d57 e000     +LDI R16 , LOW ( 0 )
000d58 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000d59 e020     +LDI R18 , LOW ( 0 )
000d5a e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000d5b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xE:
000d5c 93ed      	ST   X+,R30
000d5d 93fc      	ST   X,R31
000d5e 81e8      	LD   R30,Y
000d5f 81f9      	LDD  R31,Y+1
000d60 93fa      	ST   -Y,R31
000d61 93ea      	ST   -Y,R30
000d62 85eb      	LDD  R30,Y+11
000d63 85fc      	LDD  R31,Y+11+1
000d64 9631      	ADIW R30,1
000d65 93fa      	ST   -Y,R31
000d66 93ea      	ST   -Y,R30
000d67 85ec      	LDD  R30,Y+12
000d68 940e 0ef3 	CALL __LNEGB1
000d6a 2fae      	MOV  R26,R30
000d6b 940e 0293 	CALL _minimax
000d6d 01df      	MOVW R26,R30
000d6e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xF:
000d6f e0e0      	LDI  R30,LOW(0)
000d70 e0f0      	LDI  R31,HIGH(0)
000d71 93ed      	ST   X+,R30
000d72 93fc      	ST   X,R31
000d73 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000d74 efef      	LDI  R30,LOW(65535)
000d75 efff      	LDI  R31,HIGH(65535)
000d76 93ed      	ST   X+,R30
000d77 93fc      	ST   X,R31
000d78 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000d79 e0e0      	LDI  R30,LOW(0)
000d7a e0f0      	LDI  R31,HIGH(0)
000d7b 93fa      	ST   -Y,R31
000d7c 93ea      	ST   -Y,R30
000d7d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x12:
000d7e e0e0      	LDI  R30,LOW(0)
000d7f 93e0 01a2 	STS  _r,R30
000d81 93e0 01a3 	STS  _r+1,R30
000d83 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x13:
000d84 91a0 01a2 	LDS  R26,_r
000d86 91b0 01a3 	LDS  R27,_r+1
000d88 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x14:
000d89 93e0 01a4 	STS  _c,R30
000d8b 93f0 01a5 	STS  _c+1,R31
000d8d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x15:
000d8e 91e0 01a2 	LDS  R30,_r
000d90 91f0 01a3 	LDS  R31,_r+1
000d92 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x16:
000d93 e0e0      	LDI  R30,LOW(0)
000d94 93e0 01a4 	STS  _c,R30
000d96 93e0 01a5 	STS  _c+1,R30
000d98 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x17:
000d99 91a0 01a4 	LDS  R26,_c
000d9b 91b0 01a5 	LDS  R27,_c+1
000d9d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x18:
000d9e eaa2      	LDI  R26,LOW(_r)
000d9f e0b1      	LDI  R27,HIGH(_r)
000da0 91ed      	LD   R30,X+
000da1 91fd      	LD   R31,X+
000da2 9631      	ADIW R30,1
000da3 93fe      	ST   -X,R31
000da4 93ee      	ST   -X,R30
000da5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:109 WORDS
                 SUBOPT_0x19:
000da6 dfdd      	RCALL SUBOPT_0x13
000da7 e0e6      	LDI  R30,LOW(6)
000da8 940e 0f05 	CALL __MULB1W2U
000daa 58e2      	SUBI R30,LOW(-_game)
000dab 4ffe      	SBCI R31,HIGH(-_game)
000dac 01df      	MOVW R26,R30
000dad 91e0 01a4 	LDS  R30,_c
000daf 91f0 01a5 	LDS  R31,_c+1
000db1 0fee      	LSL  R30
000db2 1fff      	ROL  R31
000db3 0fae      	ADD  R26,R30
000db4 1fbf      	ADC  R27,R31
000db5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1A:
000db6 eaa4      	LDI  R26,LOW(_c)
000db7 e0b1      	LDI  R27,HIGH(_c)
000db8 91ed      	LD   R30,X+
000db9 91fd      	LD   R31,X+
000dba 9631      	ADIW R30,1
000dbb 93fe      	ST   -X,R31
000dbc 93ee      	ST   -X,R30
000dbd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
000dbe dfcf      	RCALL SUBOPT_0x15
000dbf e9a0      	LDI  R26,LOW(_win)
000dc0 e0b1      	LDI  R27,HIGH(_win)
000dc1 0fee      	LSL  R30
000dc2 1fff      	ROL  R31
000dc3 0fae      	ADD  R26,R30
000dc4 1fbf      	ADC  R27,R31
000dc5 cfa9      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
000dc6 940e 0724 	CALL _glcd_clear
000dc8 e0e0      	LDI  R30,LOW(0)
000dc9 93ea      	ST   -Y,R30
000dca 93ea      	ST   -Y,R30
000dcb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1D:
000dcc 940e 035a 	CALL _keypad
000dce dfbf      	RCALL SUBOPT_0x15
000dcf 940e 0ee9 	CALL __LSLW2
000dd1 dfc7      	RCALL SUBOPT_0x17
000dd2 0fea      	ADD  R30,R26
000dd3 1ffb      	ADC  R31,R27
000dd4 93e0 01a6 	STS  _k,R30
000dd6 93f0 01a7 	STS  _k+1,R31
000dd8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1E:
000dd9 91a0 01a6 	LDS  R26,_k
000ddb 91b0 01a7 	LDS  R27,_k+1
000ddd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x1F:
000dde dfa5      	RCALL SUBOPT_0x13
000ddf e0ea      	LDI  R30,LOW(10)
000de0 e0f0      	LDI  R31,HIGH(10)
000de1 940e 0f1e 	CALL __DIVW21
000de3 e0a6      	LDI  R26,LOW(6)
000de4 e0b0      	LDI  R27,HIGH(6)
000de5 940e 0efd 	CALL __MULW12U
000de7 58e2      	SUBI R30,LOW(-_game)
000de8 4ffe      	SBCI R31,HIGH(-_game)
000de9 01bf      	MOVW R22,R30
000dea dfae      	RCALL SUBOPT_0x17
000deb e0ea      	LDI  R30,LOW(10)
000dec e0f0      	LDI  R31,HIGH(10)
000ded 940e 0f1e 	CALL __DIVW21
000def 01db      	MOVW R26,R22
000df0 0fee      	LSL  R30
000df1 1fff      	ROL  R31
000df2 0fae      	ADD  R26,R30
000df3 1fbf      	ADC  R27,R31
000df4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x20:
000df5 91e0 01a4 	LDS  R30,_c
000df7 93ea      	ST   -Y,R30
000df8 91e0 01a2 	LDS  R30,_r
000dfa 93ea      	ST   -Y,R30
000dfb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
000dfc 91e0 01a4 	LDS  R30,_c
000dfe 91f0 01a5 	LDS  R31,_c+1
000e00 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x22:
000e01 df8c      	RCALL SUBOPT_0x15
000e02 e9a0      	LDI  R26,LOW(_win)
000e03 e0b1      	LDI  R27,HIGH(_win)
000e04 0fee      	LSL  R30
000e05 1fff      	ROL  R31
000e06 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
000e07 0fae      	ADD  R26,R30
000e08 1fbf      	ADC  R27,R31
000e09 940e 0f31 	CALL __GETW1P
000e0b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x24:
000e0c 01f5      	MOVW R30,R10
000e0d 940e 0ef8 	CALL __LNEGW1
000e0f 2eae      	MOV  R10,R30
000e10 24bb      	CLR  R11
000e11 01f6      	MOVW R30,R12
000e12 9631      	ADIW R30,1
000e13 016f      	MOVW R12,R30
000e14 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
000e15 efaf      	LDI  R26,LOW(65535)
000e16 efbf      	LDI  R27,HIGH(65535)
000e17 83a0      	STD  Z+0,R26
000e18 83b1      	STD  Z+1,R27
000e19 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
000e1a 91a0 01a0 	LDS  R26,_state
000e1c 91b0 01a1 	LDS  R27,_state+1
000e1e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
000e1f e4e6      	LDI  R30,LOW(70)
000e20 93ea      	ST   -Y,R30
000e21 e3e2      	LDI  R30,LOW(50)
000e22 93ea      	ST   -Y,R30
000e23 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x28:
000e24 98c1      	CBI  0x18,1
000e25 efef      	LDI  R30,LOW(255)
000e26 bbea      	OUT  0x1A,R30
000e27 81e8      	LD   R30,Y
000e28 bbeb      	OUT  0x1B,R30
000e29 940e 063e 	CALL _ks0108_enable_G100
000e2b 940c 0642 	JMP  _ks0108_disable_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x29:
000e2d 95e6      	LSR  R30
000e2e 95e6      	LSR  R30
000e2f 95e6      	LSR  R30
000e30 2fae      	MOV  R26,R30
000e31 940c 067d 	JMP  _ks0108_gotoxp_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2A:
000e33 940e 06a2 	CALL _ks0108_wrdata_G100
000e35 940c 068d 	JMP  _ks0108_nextx_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2B:
000e37 0fea      	ADD  R30,R26
000e38 1ffb      	ADC  R31,R27
000e39 83ee      	STD  Y+6,R30
000e3a 83ff      	STD  Y+6+1,R31
000e3b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2C:
000e3c 85ec      	LDD  R30,Y+12
000e3d 93ea      	ST   -Y,R30
000e3e 81ef      	LDD  R30,Y+7
000e3f 85f8      	LDD  R31,Y+7+1
000e40 9631      	ADIW R30,1
000e41 83ef      	STD  Y+7,R30
000e42 87f8      	STD  Y+7+1,R31
000e43 9731      	SBIW R30,1
000e44 93fa      	ST   -Y,R31
000e45 93ea      	ST   -Y,R30
000e46 e0a0      	LDI  R26,LOW(0)
000e47 940c 0cdb 	JMP  _glcd_writemem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2D:
000e49 85ec      	LDD  R30,Y+12
000e4a 93ea      	ST   -Y,R30
000e4b 81ef      	LDD  R30,Y+7
000e4c 85f8      	LDD  R31,Y+7+1
000e4d 9631      	ADIW R30,1
000e4e 83ef      	STD  Y+7,R30
000e4f 87f8      	STD  Y+7+1,R31
000e50 9731      	SBIW R30,1
000e51 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2E:
000e52 2766      	CLR  R22
000e53 2777      	CLR  R23
000e54 01df      	MOVW R26,R30
000e55 01cb      	MOVW R24,R22
000e56 940c 0cbc 	JMP  _glcd_readmem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
000e58 935a      	ST   -Y,R21
000e59 85aa      	LDD  R26,Y+10
000e5a 940c 0c94 	JMP  _glcd_mappixcolor1bit
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x30:
000e5c 930a      	ST   -Y,R16
000e5d 9503      	INC  R16
000e5e 89e8      	LDD  R30,Y+16
000e5f 93ea      	ST   -Y,R30
000e60 935a      	ST   -Y,R21
000e61 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x31:
000e62 930a      	ST   -Y,R16
000e63 9503      	INC  R16
000e64 89a8      	LDD  R26,Y+16
000e65 940e 06b4 	CALL _ks0108_rdbyte_G100
000e67 23e4      	AND  R30,R20
000e68 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x32:
000e69 2f5e      	MOV  R21,R30
000e6a 85ec      	LDD  R30,Y+12
000e6b 93ea      	ST   -Y,R30
000e6c 81af      	LDD  R26,Y+7
000e6d 85b8      	LDD  R27,Y+7+1
000e6e 2788      	CLR  R24
000e6f 2799      	CLR  R25
000e70 940e 0cbc 	CALL _glcd_readmem
000e72 2e1e      	MOV  R1,R30
000e73 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x33:
000e74 930a      	ST   -Y,R16
000e75 9503      	INC  R16
000e76 89e8      	LDD  R30,Y+16
000e77 93ea      	ST   -Y,R30
000e78 85ee      	LDD  R30,Y+14
000e79 93ea      	ST   -Y,R30
000e7a 85e9      	LDD  R30,Y+9
000e7b 85fa      	LDD  R31,Y+9+1
000e7c 9631      	ADIW R30,1
000e7d 87e9      	STD  Y+9,R30
000e7e 87fa      	STD  Y+9+1,R31
000e7f 9731      	SBIW R30,1
000e80 cfd1      	RJMP SUBOPT_0x2E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x34:
000e81 93ba      	ST   -Y,R27
000e82 93aa      	ST   -Y,R26
000e83 81a8      	LD   R26,Y
000e84 81b9      	LDD  R27,Y+1
000e85 940e 0f5b 	CALL __CPW02
000e87 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
000e88 940e 0f5f 	CALL __SAVELOCR6
                +
000e8a 91e0 0165+LDS R30 , _glcd_state + ( 4 )
000e8c 91f0 0166+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
000e8e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
000e8f 01f8      	MOVW R30,R16
                +
000e90 5f0f     +SUBI R16 , LOW ( - 1 )
000e91 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000e92 9004      	LPM  R0,Z
000e93 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x37:
                +
000e94 91e0 0165+LDS R30 , _glcd_state + ( 4 )
000e96 91f0 0166+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
000e98 9631      	ADIW R30,1
000e99 91e4      	LPM  R30,Z
000e9a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x38:
000e9b 932a      	ST   -Y,R18
000e9c 85ad      	LDD  R26,Y+13
000e9d 85be      	LDD  R27,Y+13+1
000e9e 85ef      	LDD  R30,Y+15
000e9f 89f8      	LDD  R31,Y+15+1
000ea0 9509      	ICALL
000ea1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x39:
000ea2 89e8      	LDD  R30,Y+16
000ea3 89f9      	LDD  R31,Y+16+1
000ea4 9734      	SBIW R30,4
000ea5 8be8      	STD  Y+16,R30
000ea6 8bf9      	STD  Y+16+1,R31
000ea7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3A:
000ea8 85ad      	LDD  R26,Y+13
000ea9 85be      	LDD  R27,Y+13+1
000eaa 85ef      	LDD  R30,Y+15
000eab 89f8      	LDD  R31,Y+15+1
000eac 9509      	ICALL
000ead 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3B:
000eae 89a8      	LDD  R26,Y+16
000eaf 89b9      	LDD  R27,Y+16+1
000eb0 9614      	ADIW R26,4
000eb1 940e 0f31 	CALL __GETW1P
000eb3 83ee      	STD  Y+6,R30
000eb4 83ff      	STD  Y+6+1,R31
000eb5 81ae      	LDD  R26,Y+6
000eb6 81bf      	LDD  R27,Y+6+1
000eb7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3C:
000eb8 89a8      	LDD  R26,Y+16
000eb9 89b9      	LDD  R27,Y+16+1
000eba 9614      	ADIW R26,4
000ebb 940e 0f31 	CALL __GETW1P
000ebd 87ea      	STD  Y+10,R30
000ebe 87fb      	STD  Y+10+1,R31
000ebf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3D:
000ec0 01de      	MOVW R26,R28
000ec1 961c      	ADIW R26,12
000ec2 940e 0ed1 	CALL __ADDW2R15
000ec4 940e 0f31 	CALL __GETW1P
000ec6 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000ec7 9610      	adiw r26,0
000ec8 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000ec9 ed80     +LDI R24 , LOW ( 0x7D0 )
000eca e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000ecb 9701     +SBIW R24 , 1
000ecc f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000ecd 95a8      	wdr
000ece 9711      	sbiw r26,1
000ecf f7c9      	brne __delay_ms0
                 __delay_ms1:
000ed0 9508      	ret
                 
                 __ADDW2R15:
000ed1 2400      	CLR  R0
000ed2 0daf      	ADD  R26,R15
000ed3 1db0      	ADC  R27,R0
000ed4 9508      	RET
                 
                 __ANEGW1:
000ed5 95f1      	NEG  R31
000ed6 95e1      	NEG  R30
000ed7 40f0      	SBCI R31,0
000ed8 9508      	RET
                 
                 __LSLB12:
000ed9 23ee      	TST  R30
000eda 2e0e      	MOV  R0,R30
000edb 2fea      	MOV  R30,R26
000edc f019      	BREQ __LSLB12R
                 __LSLB12L:
000edd 0fee      	LSL  R30
000ede 940a      	DEC  R0
000edf f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000ee0 9508      	RET
                 
                 __LSRB12:
000ee1 23ee      	TST  R30
000ee2 2e0e      	MOV  R0,R30
000ee3 2fea      	MOV  R30,R26
000ee4 f019      	BREQ __LSRB12R
                 __LSRB12L:
000ee5 95e6      	LSR  R30
000ee6 940a      	DEC  R0
000ee7 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
000ee8 9508      	RET
                 
                 __LSLW2:
000ee9 0fee      	LSL  R30
000eea 1fff      	ROL  R31
000eeb 0fee      	LSL  R30
000eec 1fff      	ROL  R31
000eed 9508      	RET
                 
                 __CWD1:
000eee 2f6f      	MOV  R22,R31
000eef 0f66      	ADD  R22,R22
000ef0 0b66      	SBC  R22,R22
000ef1 2f76      	MOV  R23,R22
000ef2 9508      	RET
                 
                 __LNEGB1:
000ef3 23ee      	TST  R30
000ef4 e0e1      	LDI  R30,1
000ef5 f009      	BREQ __LNEGB1F
000ef6 27ee      	CLR  R30
                 __LNEGB1F:
000ef7 9508      	RET
                 
                 __LNEGW1:
000ef8 2bef      	OR   R30,R31
000ef9 e0e1      	LDI  R30,1
000efa f009      	BREQ __LNEGW1F
000efb e0e0      	LDI  R30,0
                 __LNEGW1F:
000efc 9508      	RET
                 
                 __MULW12U:
000efd 9ffa      	MUL  R31,R26
000efe 2df0      	MOV  R31,R0
000eff 9feb      	MUL  R30,R27
000f00 0df0      	ADD  R31,R0
000f01 9fea      	MUL  R30,R26
000f02 2de0      	MOV  R30,R0
000f03 0df1      	ADD  R31,R1
000f04 9508      	RET
                 
                 __MULB1W2U:
000f05 2f6e      	MOV  R22,R30
000f06 9f6a      	MUL  R22,R26
000f07 01f0      	MOVW R30,R0
000f08 9f6b      	MUL  R22,R27
000f09 0df0      	ADD  R31,R0
000f0a 9508      	RET
                 
                 __DIVW21U:
000f0b 2400      	CLR  R0
000f0c 2411      	CLR  R1
000f0d e190      	LDI  R25,16
                 __DIVW21U1:
000f0e 0faa      	LSL  R26
000f0f 1fbb      	ROL  R27
000f10 1c00      	ROL  R0
000f11 1c11      	ROL  R1
000f12 1a0e      	SUB  R0,R30
000f13 0a1f      	SBC  R1,R31
000f14 f418      	BRCC __DIVW21U2
000f15 0e0e      	ADD  R0,R30
000f16 1e1f      	ADC  R1,R31
000f17 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000f18 60a1      	SBR  R26,1
                 __DIVW21U3:
000f19 959a      	DEC  R25
000f1a f799      	BRNE __DIVW21U1
000f1b 01fd      	MOVW R30,R26
000f1c 01d0      	MOVW R26,R0
000f1d 9508      	RET
                 
                 __DIVW21:
000f1e d004      	RCALL __CHKSIGNW
000f1f dfeb      	RCALL __DIVW21U
000f20 f40e      	BRTC __DIVW211
000f21 dfb3      	RCALL __ANEGW1
                 __DIVW211:
000f22 9508      	RET
                 
                 __CHKSIGNW:
000f23 94e8      	CLT
000f24 fff7      	SBRS R31,7
000f25 c002      	RJMP __CHKSW1
000f26 dfae      	RCALL __ANEGW1
000f27 9468      	SET
                 __CHKSW1:
000f28 ffb7      	SBRS R27,7
000f29 c006      	RJMP __CHKSW2
000f2a 95a0      	COM  R26
000f2b 95b0      	COM  R27
000f2c 9611      	ADIW R26,1
000f2d f800      	BLD  R0,0
000f2e 9403      	INC  R0
000f2f fa00      	BST  R0,0
                 __CHKSW2:
000f30 9508      	RET
                 
                 __GETW1P:
000f31 91ed      	LD   R30,X+
000f32 91fc      	LD   R31,X
000f33 9711      	SBIW R26,1
000f34 9508      	RET
                 
                 __GETW1PF:
000f35 9005      	LPM  R0,Z+
000f36 91f4      	LPM  R31,Z
000f37 2de0      	MOV  R30,R0
000f38 9508      	RET
                 
                 __PUTPARD1:
000f39 937a      	ST   -Y,R23
000f3a 936a      	ST   -Y,R22
000f3b 93fa      	ST   -Y,R31
000f3c 93ea      	ST   -Y,R30
000f3d 9508      	RET
                 
                 __EEPROMRDB:
000f3e 99e1      	SBIC EECR,EEWE
000f3f cffe      	RJMP __EEPROMRDB
000f40 93ff      	PUSH R31
000f41 b7ff      	IN   R31,SREG
000f42 94f8      	CLI
000f43 bbae      	OUT  EEARL,R26
000f44 bbbf      	OUT  EEARH,R27
000f45 9ae0      	SBI  EECR,EERE
000f46 b3ed      	IN   R30,EEDR
000f47 bfff      	OUT  SREG,R31
000f48 91ff      	POP  R31
000f49 9508      	RET
                 
                 __EEPROMWRB:
000f4a 9be1      	SBIS EECR,EEWE
000f4b c002      	RJMP __EEPROMWRB1
000f4c 95a8      	WDR
000f4d cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000f4e b79f      	IN   R25,SREG
000f4f 94f8      	CLI
000f50 bbae      	OUT  EEARL,R26
000f51 bbbf      	OUT  EEARH,R27
000f52 9ae0      	SBI  EECR,EERE
000f53 b38d      	IN   R24,EEDR
000f54 17e8      	CP   R30,R24
000f55 f019      	BREQ __EEPROMWRB0
000f56 bbed      	OUT  EEDR,R30
000f57 9ae2      	SBI  EECR,EEMWE
000f58 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000f59 bf9f      	OUT  SREG,R25
000f5a 9508      	RET
                 
                 __CPW02:
000f5b 2400      	CLR  R0
000f5c 160a      	CP   R0,R26
000f5d 060b      	CPC  R0,R27
000f5e 9508      	RET
                 
                 __SAVELOCR6:
000f5f 935a      	ST   -Y,R21
                 __SAVELOCR5:
000f60 934a      	ST   -Y,R20
                 __SAVELOCR4:
000f61 933a      	ST   -Y,R19
                 __SAVELOCR3:
000f62 932a      	ST   -Y,R18
                 __SAVELOCR2:
000f63 931a      	ST   -Y,R17
000f64 930a      	ST   -Y,R16
000f65 9508      	RET
                 
                 __LOADLOCR6:
000f66 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000f67 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000f68 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000f69 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000f6a 8119      	LDD  R17,Y+1
000f6b 8108      	LD   R16,Y
000f6c 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  51 r1 :  13 r2 :   0 r3 :   0 r4 :   3 r5 :   0 r6 :   3 r7 :   0 
r8 :   4 r9 :   2 r10:   6 r11:   5 r12:   6 r13:   4 r14:   0 r15:   4 
r16:  87 r17: 115 r18:  75 r19:  49 r20:  32 r21:  51 r22:  26 r23:  10 
r24:  21 r25:   8 r26: 413 r27: 156 r28:  34 r29:   1 r30: 921 r31: 317 
x  :  54 y  : 519 z  :  34 
Registers used: 30 out of 35 (85.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  31 add   :  43 
adiw  :  52 and   :   7 andi  :  12 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  60 
brge  :  22 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  13 
brlt  :   6 brmi  :   1 brne  : 122 brpl  :   1 brsh  :  21 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 328 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  30 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   9 
cp    :  41 cpc   :  52 cpi   : 122 cpse  :   0 dec   :   4 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   4 ijmp  :   0 
in    :   5 inc   :   5 jmp   :  40 ld    :  57 ldd   : 263 ldi   : 367 
lds   :  87 lpm   :  32 lsl   :  15 lsr   :  15 mov   :  90 movw  :  73 
mul   :  12 muls  :   0 mulsu :   0 neg   :   2 nop   :   2 or    :   8 
ori   :   8 out   :  55 pop   :  16 push  :  16 rcall :  73 ret   : 106 
reti  :   0 rjmp  : 211 rol   :  16 ror   :   0 sbc   :   3 sbci  :  25 
sbi   :  19 sbic  :   5 sbis  :   5 sbiw  :  70 sbr   :   1 sbrc  :   2 
sbrs  :  14 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 190 std   :  76 sts   :  53 sub   :   8 subi  :  60 swap  :   1 
tst   :   8 wdr   :   2 
Instructions used: 71 out of 116 (61.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001eda   7226    672   7898   16384  48.2%
[.dseg] 0x000060 0x0001b5      0     85     85    1024   8.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 14 warnings
